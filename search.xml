<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>搭建自己的第一个网站</title>
    <url>/posts/56146dea.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平常，我们自己在编辑器写的网页想要进行浏览可以很简单，但我们有没有想过一个问题，当我们想发给别人看的时候，他人要看只可以在文件看，而不可以发个链接直接看，这样的话，对非专业的人很不友好，也不方便。那么，站长将在这里写一篇如何利用Gitee Pages搭建自己的第一个静态网页。（LIEFox就是利用了Gitee Pages 部署的）</p>
<p>作为一个即将跨入程序员行业的码蚁，每个人都想搭建一个属于自己的网站，然后这个教程我将教大家如何将自己写的网站部署在gitee的仓库上，并实现一个网址就可以在线浏览的方法。好啦，话不多说，直奔主题。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>需要准备一个带有 index.html 的网页</li>
<li>下载 git 工具</li>
<li>创建 gitee 仓库</li>
</ol>
<p>来开造</p>
<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>写一个网页，文件名记得改成index.html，因为到时候部署在gitee page进入的是首页，如果不是index会报404。</p>
<p><a href="https://imgchr.com/i/r2orO1"><img src="https://s3.ax1x.com/2020/12/24/r2orO1.md.png" alt="r2orO1.md.png"></a></p>
<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><h2 id="1-下载git工具"><a href="#1-下载git工具" class="headerlink" title="1.下载git工具"></a>1.下载git工具</h2><p>git工具已经发在了网盘上了，请云盘下载</p>
<h4 id="git下载地址"><a href="#git下载地址" class="headerlink" title="git下载地址"></a><a href="https://wws.lanzous.com/iSnBAjobi3a">git下载地址</a></h4><h2 id="2-下载好了，双击进入安装界面"><a href="#2-下载好了，双击进入安装界面" class="headerlink" title="2.下载好了，双击进入安装界面"></a>2.下载好了，双击进入安装界面</h2><p><a href="https://imgchr.com/i/r2TkhF"><img src="https://s3.ax1x.com/2020/12/24/r2TkhF.png" alt="r2TkhF.png"></a></p>
<h2 id="3-点击Next"><a href="#3-点击Next" class="headerlink" title="3.点击Next"></a>3.点击Next</h2><p><a href="https://imgchr.com/i/r2TltO"><img src="https://s3.ax1x.com/2020/12/24/r2TltO.png" alt="r2TltO.png"></a></p>
<h2 id="4-选择安装路径》点击Next"><a href="#4-选择安装路径》点击Next" class="headerlink" title="4.选择安装路径》点击Next"></a>4.选择安装路径》点击Next</h2><p><a href="https://imgchr.com/i/r2H56J"><img src="https://s3.ax1x.com/2020/12/24/r2H56J.png" alt="r2H56J.png"></a></p>
<h2 id="5-选择需要的主键→点击Next"><a href="#5-选择需要的主键→点击Next" class="headerlink" title="5.选择需要的主键→点击Next"></a>5.选择需要的主键→点击Next</h2><p><a href="https://imgchr.com/i/r2b90I"><img src="https://s3.ax1x.com/2020/12/24/r2b90I.md.png" alt="r2b90I.md.png"></a></p>
<h2 id="6-点击Next"><a href="#6-点击Next" class="headerlink" title="6.点击Next"></a>6.点击Next</h2><p><a href="https://imgchr.com/i/r2buBn"><img src="https://s3.ax1x.com/2020/12/24/r2buBn.md.png" alt="r2buBn.md.png"></a></p>
<h2 id="7-点击Next"><a href="#7-点击Next" class="headerlink" title="7.点击Next"></a>7.点击Next</h2><p><a href="https://imgchr.com/i/r2qDZn"><img src="https://s3.ax1x.com/2020/12/24/r2qDZn.md.png" alt="r2qDZn.md.png"></a></p>
<h2 id="8-后面一直点Next"><a href="#8-后面一直点Next" class="headerlink" title="8.后面一直点Next"></a>8.后面一直点Next</h2><h2 id="9-点击install"><a href="#9-点击install" class="headerlink" title="9.点击install"></a>9.点击install</h2><p><a href="https://imgchr.com/i/r2L9FP"><img src="https://s3.ax1x.com/2020/12/24/r2L9FP.md.png" alt="r2L9FP.md.png"></a></p>
<h2 id="10-安装ing"><a href="#10-安装ing" class="headerlink" title="10.安装ing"></a>10.安装ing</h2><p><a href="https://imgchr.com/i/r2LFSS"><img src="https://s3.ax1x.com/2020/12/24/r2LFSS.md.png" alt="r2LFSS.md.png"></a></p>
<h2 id="11-点击Finish"><a href="#11-点击Finish" class="headerlink" title="11.点击Finish"></a>11.点击Finish</h2><p><a href="https://imgchr.com/i/r2LELj"><img src="https://s3.ax1x.com/2020/12/24/r2LELj.md.png" alt="r2LELj.md.png"></a></p>
<p>看看，安装成功了没有</p>
<p><a href="https://imgchr.com/i/r2Lymd"><img src="https://s3.ax1x.com/2020/12/24/r2Lymd.png" alt="r2Lymd.png"></a></p>
<p>右击桌面空白处，看看有没有<strong>Git Bash Here</strong> 这个命令。</p>
<p>[TOC]</p>
<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>创建gitee仓库，点击链接进入gitee官网。</p>
<p><a href="https://gitee.com/">gitee官网</a></p>
<p>没有的同学自己注册一个，登录好了来到这一步。</p>
<h2 id="1-点击网页右上角的-号→新建仓库"><a href="#1-点击网页右上角的-号→新建仓库" class="headerlink" title="1.点击网页右上角的 + 号→新建仓库"></a>1.点击网页右上角的 + 号→新建仓库</h2><p><a href="https://imgchr.com/i/r2OzPP"><img src="https://s3.ax1x.com/2020/12/24/r2OzPP.png" alt="r2OzPP.png"></a></p>
<h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><ul>
<li><h4 id="仓库名称任意，尽量规范；注意：当填仓库名称时，路径将会自动转成英文。"><a href="#仓库名称任意，尽量规范；注意：当填仓库名称时，路径将会自动转成英文。" class="headerlink" title="仓库名称任意，尽量规范；注意：当填仓库名称时，路径将会自动转成英文。"></a>仓库名称任意，尽量规范；注意：当填仓库名称时，路径将会自动转成英文。</h4></li>
<li><h4 id="仓库介绍非必填；"><a href="#仓库介绍非必填；" class="headerlink" title="仓库介绍非必填；"></a>仓库介绍非必填；</h4></li>
<li><h4 id="开源选择公开；"><a href="#开源选择公开；" class="headerlink" title="开源选择公开；"></a>开源选择<strong>公开</strong>；</h4></li>
<li><h4 id="选择语言，选择-JavaScript；"><a href="#选择语言，选择-JavaScript；" class="headerlink" title="选择语言，选择 JavaScript；"></a>选择语言，选择 <strong>JavaScript</strong>；</h4></li>
<li><h4 id="点击创建按钮"><a href="#点击创建按钮" class="headerlink" title="点击创建按钮"></a>点击<strong>创建</strong>按钮</h4></li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a><a href="https://imgchr.com/i/r2X0qH"><img src="https://s3.ax1x.com/2020/12/24/r2X0qH.md.png" alt="r2X0qH.md.png"></a></h2><h2 id="3-进入到git命令界面"><a href="#3-进入到git命令界面" class="headerlink" title="3.进入到git命令界面"></a>3.进入到git命令界面</h2><p><a href="https://imgchr.com/i/r2jD6U"><img src="https://s3.ax1x.com/2020/12/24/r2jD6U.md.png" alt="r2jD6U.md.png"></a></p>
<p>创建好了，现在我们回到刚刚写的网页的文件夹。</p>
<p>[TOC]</p>
<h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><h2 id="部署项目到gitee上"><a href="#部署项目到gitee上" class="headerlink" title="部署项目到gitee上"></a>部署项目到gitee上</h2><h2 id="1-来到刚刚写的-index-html-文件夹，右击空白处，点击Git-Bash-Here。注意：上传项目时，文件夹是整个项目，就是说项目里的根目录。"><a href="#1-来到刚刚写的-index-html-文件夹，右击空白处，点击Git-Bash-Here。注意：上传项目时，文件夹是整个项目，就是说项目里的根目录。" class="headerlink" title="1.来到刚刚写的 index.html 文件夹，右击空白处，点击Git Bash Here。注意：上传项目时，文件夹是整个项目，就是说项目里的根目录。"></a>1.来到刚刚写的 index.html 文件夹，右击空白处，点击Git Bash Here。注意：上传项目时，文件夹是整个项目，就是说项目里的根目录。</h2><p><a href="https://imgchr.com/i/r2vkhq"><img src="https://s3.ax1x.com/2020/12/24/r2vkhq.png" alt="r2vkhq.png"></a></p>
<h2 id="2-进入命令窗口"><a href="#2-进入命令窗口" class="headerlink" title="2.进入命令窗口"></a>2.进入命令窗口</h2><p><a href="https://imgchr.com/i/r2x5ee"><img src="https://s3.ax1x.com/2020/12/24/r2x5ee.md.png" alt="r2x5ee.md.png"></a></p>
<h2 id="3-回到刚刚的git代码帮助页面"><a href="#3-回到刚刚的git代码帮助页面" class="headerlink" title="3.回到刚刚的git代码帮助页面"></a>3.回到刚刚的git代码帮助页面</h2><ul>
<li>第一步，在黑窗口输入图下圈住的Git全局设置命令。（如果以后还要部署的话，就不用在再执行这一步了）</li>
</ul>
<p><a href="https://imgchr.com/i/rRHOG8"><img src="https://s3.ax1x.com/2020/12/25/rRHOG8.md.png" alt="rRHOG8.md.png"></a></p>
<ul>
<li>第二步，在接着输入下面语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">&#x2F;&#x2F;注意回车</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/r2zxc6"><img src="https://s3.ax1x.com/2020/12/24/r2zxc6.png" alt="r2zxc6.png"></a></p>
<h2 id="4-回到gitee创建仓库git命令页面，将圈起来的这三句复制下来，到Bash黑窗口。"><a href="#4-回到gitee创建仓库git命令页面，将圈起来的这三句复制下来，到Bash黑窗口。" class="headerlink" title="4.回到gitee创建仓库git命令页面，将圈起来的这三句复制下来，到Bash黑窗口。"></a>4.回到gitee创建仓库git命令页面，将圈起来的这三句复制下来，到Bash黑窗口。</h2><p><a href="https://imgchr.com/i/r2zuk9"><img src="https://s3.ax1x.com/2020/12/24/r2zuk9.md.png" alt="r2zuk9.md.png"></a></p>
<h3 id="注意：命令行窗口里不可以-ctrl-v-命令行的粘贴快捷键是-shift-insert"><a href="#注意：命令行窗口里不可以-ctrl-v-命令行的粘贴快捷键是-shift-insert" class="headerlink" title="注意：命令行窗口里不可以 ctrl+v ,命令行的粘贴快捷键是 shift+insert"></a><strong>注意：命令行窗口里不可以 ctrl+v ,命令行的粘贴快捷键是 shift+insert</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;gitee.com&#x2F;cxq21&#x2F;first-page.git</span><br><span class="line">git push -u origin master</span><br><span class="line">&#x2F;&#x2F;注意回车</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/rRSnu8"><img src="https://s3.ax1x.com/2020/12/24/rRSnu8.png" alt="rRSnu8.png"></a></p>
<h3 id="注意：当运行到-”git-push-u-origin-master“-时，他会弹出一个窗口，填入你当时注册时的用户名和密码，确定。"><a href="#注意：当运行到-”git-push-u-origin-master“-时，他会弹出一个窗口，填入你当时注册时的用户名和密码，确定。" class="headerlink" title="注意：当运行到 ”git push -u origin master“ 时，他会弹出一个窗口，填入你当时注册时的用户名和密码，确定。"></a>注意：当运行到 ”git push -u origin master“ 时，他会弹出一个窗口，填入你当时注册时的用户名和密码，确定。</h3><p><a href="https://imgchr.com/i/rRqmp8"><img src="https://s3.ax1x.com/2020/12/25/rRqmp8.jpg" alt="rRqmp8.jpg"></a></p>
<p>当加载到100%时，就代表上传成功。</p>
<p><a href="https://imgchr.com/i/rRpuxx"><img src="https://s3.ax1x.com/2020/12/24/rRpuxx.png" alt="rRpuxx.png"></a></p>
<h2 id="5-上传成功，回到git命令页面，刷新一下网页。"><a href="#5-上传成功，回到git命令页面，刷新一下网页。" class="headerlink" title="5.上传成功，回到git命令页面，刷新一下网页。"></a>5.上传成功，回到git命令页面，刷新一下网页。</h2><p><a href="https://imgchr.com/i/rRpYid"><img src="https://s3.ax1x.com/2020/12/24/rRpYid.md.png" alt="rRpYid.md.png"></a></p>
<p>进入到这个仓库网页，胜利就在眼前，加油！马上就可以看到成果了。</p>
<p><a href="https://imgchr.com/i/rRpUzt"><img src="https://s3.ax1x.com/2020/12/24/rRpUzt.md.png" alt="rRpUzt.md.png"></a></p>
<h2 id="6-点击-服务-→-Gitee-Pages"><a href="#6-点击-服务-→-Gitee-Pages" class="headerlink" title="6.点击 服务 → Gitee Pages"></a>6.点击 服务 → Gitee Pages</h2><p><a href="https://imgchr.com/i/rRC14H"><img src="https://s3.ax1x.com/2020/12/24/rRC14H.md.png" alt="rRC14H.md.png"></a></p>
<h2 id="7-点击启动，等待一会儿，将会给个地址。"><a href="#7-点击启动，等待一会儿，将会给个地址。" class="headerlink" title="7.点击启动，等待一会儿，将会给个地址。"></a>7.点击启动，等待一会儿，将会给个地址。</h2><p><a href="https://imgchr.com/i/rRC7x1"><img src="https://s3.ax1x.com/2020/12/24/rRC7x1.md.png" alt="rRC7x1.md.png"></a></p>
<h2 id="8-gitee会给你一个网站地址：-http-cxq21-gitee-io-first-page-没错，这就是你的第一个网站。点击它，就可以进去了。"><a href="#8-gitee会给你一个网站地址：-http-cxq21-gitee-io-first-page-没错，这就是你的第一个网站。点击它，就可以进去了。" class="headerlink" title="8.gitee会给你一个网站地址： http://cxq21.gitee.io/first-page 没错，这就是你的第一个网站。点击它，就可以进去了。"></a>8.gitee会给你一个网站地址： <a href="http://cxq21.gitee.io/first-page">http://cxq21.gitee.io/first-page</a> 没错，这就是你的第一个网站。点击它，就可以进去了。</h2><p><a href="https://imgchr.com/i/rRCLqK"><img src="https://s3.ax1x.com/2020/12/24/rRCLqK.png" alt="rRCLqK.png"></a></p>
<p>[TOC]</p>
<h1 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h1><p><a href="https://imgchr.com/i/rRPUzR"><img src="https://s3.ax1x.com/2020/12/24/rRPUzR.md.png" alt="rRPUzR.md.png"></a></p>
<p><strong>可以将网站链接分享给别人啦，又get到一个技能了。</strong></p>
<p><strong>如果在途中出现什么问题，可以在进QQ群咨询，有大佬帮忙。</strong></p>
<p><a href="https://imgchr.com/i/rRiCY4"><img src="https://s3.ax1x.com/2020/12/25/rRiCY4.md.png" alt="rRiCY4.md.png"></a></p>
<p>作者：<a href="https://cxq21.gitee.io/">LIEFox</a>  zjh</p>
]]></content>
      <categories>
        <category>JS案例</category>
      </categories>
      <tags>
        <tag>案例记录</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA目录</title>
    <url>/posts/fdedec16.html</url>
    <content><![CDATA[<h1 id="今天开始正式写Java笔记"><a href="#今天开始正式写Java笔记" class="headerlink" title="今天开始正式写Java笔记"></a>今天开始正式写Java笔记</h1><h2 id="为什么要写Java笔记？"><a href="#为什么要写Java笔记？" class="headerlink" title="为什么要写Java笔记？"></a>为什么要写Java笔记？</h2><p>作为一个学习技术的的小站</p>
<p>LIEFox已经磨刀了许久，终于要正式推出Java菜鸟笔记了。在这里我要立个Flag，从入门到入坟一定要坚持写完。顺便巩固一下自己的基础（就是因为鄙人太弱了，哎~），以免面试的时候被问到自闭！！！</p>
<h3 id="最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！"><a href="#最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！" class="headerlink" title="最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！"></a>最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！</h3><hr>
<h4 id="JAVA笔记将会分为以下几个阶段"><a href="#JAVA笔记将会分为以下几个阶段" class="headerlink" title="JAVA笔记将会分为以下几个阶段"></a>JAVA笔记将会分为以下几个阶段</h4><h1 id="（目录）"><a href="#（目录）" class="headerlink" title="（目录）"></a><strong>（目录）</strong></h1><h2 id="一、JAVA入门"><a href="#一、JAVA入门" class="headerlink" title="一、JAVA入门"></a>一、JAVA入门</h2><ul>
<li>Java快速入门<ol>
<li><a href="https://cxq21.gitee.io/posts/98ac5948.html" target="_blank">JAVA简介</a></li>
<li><a href="https://cxq21.gitee.io/posts/bdfde94f.html" target="_blank">JAVA程序基础</a></li>
<li><a href="https://cxq21.gitee.io/posts/368ebfeb.html" target="_blank">流程控制</a></li>
<li><a href="https://cxq21.gitee.io/posts/335f9f1b.html" target="_blank">数组控制</a></li>
</ol>
</li>
<li>面向对象编程<ol>
<li><a href="https://cxq21.gitee.io/posts/9d9ad23f.html" target="_blank">面向对象基础</a></li>
<li>Java核心类</li>
</ol>
</li>
<li>异常处理</li>
<li>反射</li>
<li>注解</li>
<li>泛型</li>
<li>集合</li>
<li>IO</li>
<li>日期与时间</li>
<li>单元测试</li>
<li>正则表达式</li>
</ul>
<h2 id="二、JAVA进阶"><a href="#二、JAVA进阶" class="headerlink" title="二、JAVA进阶"></a>二、JAVA进阶</h2><ul>
<li>加密与安全</li>
<li>多线程</li>
<li>Maven基础</li>
<li>网络编程</li>
<li>XML与JSON</li>
<li>JDBC编程</li>
<li>Mybaits技术</li>
<li>函数式编程</li>
<li>设计模式</li>
<li>Web开发</li>
<li>Spring开发</li>
<li>SpringMVC开发</li>
</ul>
]]></content>
      <categories>
        <category>JAVA笔记</category>
      </categories>
      <tags>
        <tag>JAVA笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>加入拾柒工作室</title>
    <url>/posts/3dc898ff.html</url>
    <content><![CDATA[<h1 id="关于拾柒工作室"><a href="#关于拾柒工作室" class="headerlink" title="关于拾柒工作室"></a>关于拾柒工作室</h1><p>拾柒工作室是由三个在校大学生创建的一个小工作室。为何取名为“拾柒”，是因为我们三个人都来自17寝室，然后取名为拾柒，然后偷偷告诉你们，还有一个含义，大家可以在评论区留言，来揣测一下。</p>
<a id="more"></a>

<h2 id="拾柒工作室成员"><a href="#拾柒工作室成员" class="headerlink" title="拾柒工作室成员"></a>拾柒工作室成员</h2><h3 id="佐佳豪：担任拾柒工作室成员之一，是LIEFox网站的搭建的一名小码蚁。"><a href="#佐佳豪：担任拾柒工作室成员之一，是LIEFox网站的搭建的一名小码蚁。" class="headerlink" title="佐佳豪：担任拾柒工作室成员之一，是LIEFox网站的搭建的一名小码蚁。"></a>佐佳豪：担任拾柒工作室成员之一，是LIEFox网站的搭建的一名小码蚁。</h3><h3 id="万津津：担任拾柒工作室成员之一，是LIEFox网站的前端设计的一名攻城狮。"><a href="#万津津：担任拾柒工作室成员之一，是LIEFox网站的前端设计的一名攻城狮。" class="headerlink" title="万津津：担任拾柒工作室成员之一，是LIEFox网站的前端设计的一名攻城狮。"></a>万津津：担任拾柒工作室成员之一，是LIEFox网站的前端设计的一名攻城狮。</h3><h3 id="李玮峰：担任拾柒工作室成员之一，是LIEFox网站的UI设计的一名射击狮。"><a href="#李玮峰：担任拾柒工作室成员之一，是LIEFox网站的UI设计的一名射击狮。" class="headerlink" title="李玮峰：担任拾柒工作室成员之一，是LIEFox网站的UI设计的一名射击狮。"></a>李玮峰：担任拾柒工作室成员之一，是LIEFox网站的UI设计的一名射击狮。</h3><hr>
<h1 id="欢迎加入我们"><a href="#欢迎加入我们" class="headerlink" title="欢迎加入我们"></a>欢迎加入我们</h1><h5 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h5><p>​    对网页搭建感兴趣，肯学习钻研（必）</p>
<p>​    具有创新精神（必）</p>
<p>​    具有团队合作精神（必）</p>
<p>​    具有过硬的前端语言（HTML+CSS+JS)等等（选）</p>
<p>​    具有审美高的UI设计（PS+AI+会使用图床）等等（选）</p>
<p>​    具有JAVA,JAVAScript,Python等等清晰过硬的理论（选）</p>
<h1 id="加入邮箱（-x32-x36-48-x36-48-57-55-50-x31-56-x40-113-x71-46-99-111-x6d"><a href="#加入邮箱（-x32-x36-48-x36-48-57-55-50-x31-56-x40-113-x71-46-99-111-x6d" class="headerlink" title="加入邮箱（&#x32;&#x36;&#48;&#x36;&#48;&#57;&#55;&#50;&#x31;&#56;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;)"></a>加入邮箱（<a href="mailto:&#x32;&#x36;&#48;&#x36;&#48;&#57;&#55;&#50;&#x31;&#56;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x32;&#x36;&#48;&#x36;&#48;&#57;&#55;&#50;&#x31;&#56;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>)</h1><h1 id="联系电话（15270055490-佐佳豪）"><a href="#联系电话（15270055490-佐佳豪）" class="headerlink" title="联系电话（15270055490 佐佳豪）"></a>联系电话（15270055490 佐佳豪）</h1><h1 id="地址（江信学院教学楼606）"><a href="#地址（江信学院教学楼606）" class="headerlink" title="地址（江信学院教学楼606）"></a>地址（江信学院教学楼606）</h1><h1 id="！！！任何时间都可以！！！"><a href="#！！！任何时间都可以！！！" class="headerlink" title="！！！任何时间都可以！！！"></a>！！！任何时间都可以！！！</h1><p>​                                                                                                                                                                                                                <em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>关于本站</category>
      </categories>
      <tags>
        <tag>关于我们</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb用户管理案例</title>
    <url>/posts/86e4fac1.html</url>
    <content><![CDATA[<h1 id="前言—–"><a href="#前言—–" class="headerlink" title="前言—–"></a>前言—–</h1><p>感谢大佬**<a href="http://39.102.50.196/">愿为你的城</a>**提供的源码，站长细微修改。项目下载地址会放在文章末尾。</p>
<p>接下来我们将要写一个简单的用户管理页面。<strong>Here we go！</strong></p>
<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>看案例要求：</p>
<p><a href="https://imgchr.com/i/rgHwCD"><img src="https://s3.ax1x.com/2020/12/24/rgHwCD.png" alt="rgHwCD.png"></a></p>
<p><strong>我们需要建一个Javaweb项目，咱们先按照下图的项目结构搭建起来，配置tomcat服务器请自行百度。后期会出教程。</strong></p>
<p><a href="https://imgchr.com/i/r2t6O0"><img src="https://s3.ax1x.com/2020/12/24/r2t6O0.png" alt="r2t6O0.png"></a></p>
<p>搭建好了，咱们就开敲代码</p>
<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><ul>
<li>UserDao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> POJO.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 4:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateById</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>UserDaoImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> POJO.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 4:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Map集合，作为一个数据库存取数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        users = <span class="keyword">new</span> HashMap&lt;Integer, User&gt;();</span><br><span class="line">        users.put(<span class="number">1</span>, <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        users.put(<span class="number">2</span>, <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;小王&quot;</span>, <span class="number">30</span>));</span><br><span class="line">        users.put(<span class="number">3</span>, <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;小刚&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        users.put(<span class="number">4</span>, <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;小牛&quot;</span>, <span class="number">27</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer initId = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getId() == <span class="number">0</span>) &#123;</span><br><span class="line">            user.setId(initId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.getUsername() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                user.setUsername(<span class="string">&quot;请输入姓名&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        users.put(initId, <span class="keyword">new</span> User(user.getId(), user.getUsername(), user.getAge()));</span><br><span class="line">        initId++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), <span class="keyword">new</span> User(user.getId(), user.getUsername(), user.getAge()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; user = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        User user = users.get(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="POJO层"><a href="#POJO层" class="headerlink" title="POJO层"></a>POJO层</h3><ul>
<li>User</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POJO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dao.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 4:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String username, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = UserDaoImpl.initId;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.username = <span class="string">&quot;请输入姓名&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><ul>
<li>UserService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> POJO.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 4:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUser</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>UserServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> Dao.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> POJO.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 4:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        userDao.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.query();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        User user = userDao.queryById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Util包"><a href="#Util包" class="headerlink" title="Util包"></a>Util包</h3><ul>
<li>WebUtils</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 4:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把 Map 中的值注入到对应的javabean属性中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">copyParamentBean</span><span class="params">(Map value, T bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注入之前 ：&quot;</span> + bean);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 把所有的参数都注入 user 对象中</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            BeanUtils.populate(bean, value);</span><br><span class="line">            System.out.println(<span class="string">&quot;注入之后&quot;</span> + bean);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串转换为 int类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String string, <span class="keyword">int</span> defaultValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(string);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web层"><a href="#Web层" class="headerlink" title="Web层"></a>Web层</h3><ul>
<li>BaseServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 5:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;BaseServlet&quot;, urlPatterns = &quot;/baseServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决 post 请求中乱码的问题</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//解决浏览器乱码问题</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        String action = request.getParameter(<span class="string">&quot;action&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取action业务鉴别字符串，获取相应的业务 方法反射对象</span></span><br><span class="line">            Method method = <span class="keyword">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            System.out.println(method);</span><br><span class="line">            <span class="comment">// 调用目标业务 方法</span></span><br><span class="line">            method.invoke(<span class="keyword">this</span>, request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>UserServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> POJO.User;</span><br><span class="line"><span class="keyword">import</span> Service.UserService;</span><br><span class="line"><span class="keyword">import</span> Service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> Util.WebUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zjh on 2020/12/24 下午 5:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;UserServlet&quot;, urlPatterns = &quot;/userServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        User user = WebUtils.copyParamentBean(req.getParameterMap(), <span class="keyword">new</span> User());</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">        resp.sendRedirect(req.getContextPath()+<span class="string">&quot;/userServlet?action=page&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        userService.deleteUserById(id);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/userServlet?action=page&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">updateUserById</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        User user = WebUtils.copyParamentBean(req.getParameterMap(), <span class="keyword">new</span> User());</span><br><span class="line">        userService.updateUserById(user);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/userServlet?action=page&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">queryUserById</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        User user = userService.queryUserById(id);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;user&quot;</span> , user );</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/pages/user/userAdd.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">page</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userService.queryUser();</span><br><span class="line">        req.setAttribute(<span class="string">&quot;user&quot;</span> , users );</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/pages/user/userList.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><h3 id="web目录下的代码"><a href="#web目录下的代码" class="headerlink" title="web目录下的代码"></a>web目录下的代码</h3><ul>
<li><p>page</p>
<ul>
<li><p>user</p>
<ul>
<li>userAdd.jsp</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 小青男朋友</span><br><span class="line">  <span class="built_in">Date</span>: <span class="number">2020</span>/<span class="number">12</span>/<span class="number">24</span></span><br><span class="line">  Time: 下午 <span class="number">4</span>:<span class="number">42</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;userServlet&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;action&quot;</span> value=<span class="string">&quot;$&#123;param.method&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;label&gt;用户名&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;$&#123;requestScope.user.id&#125;&quot;</span>&gt;&lt;<span class="regexp">/label&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;label&gt;姓名&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;requestScope.user.username&#125;&quot;</span>&gt;&lt;<span class="regexp">/label&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;label&gt;年龄&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;$&#123;requestScope.user.age&#125;&quot;</span>&gt;&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>userList.jsp</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 小青男朋友</span><br><span class="line">  <span class="built_in">Date</span>: <span class="number">2020</span>/<span class="number">12</span>/<span class="number">24</span></span><br><span class="line">  Time: 下午 <span class="number">4</span>:<span class="number">42</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> deleteA = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; deleteA.length; i++) &#123;</span><br><span class="line">            deleteA[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.parentNode.parentNode</span><br><span class="line">                <span class="keyword">return</span> confirm(<span class="string">&quot;确认删除【&quot;</span> + <span class="built_in">this</span>.parentNode.parentNode.children[<span class="number">1</span>].innerHTML + <span class="string">&quot;】吗？&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span> width=<span class="string">&quot;400px&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;requestScope.user&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.username&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;userServlet?action=queryUserById&amp;id=$&#123;user.id&#125;&amp;method=updateUserById&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;/a&gt;&amp;nbsp;</span><br><span class="line">                &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;delete&quot;</span> href=<span class="string">&quot;userServlet?action=deleteUserById&amp;id=$&#123;user.id&#125;&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;userServlet?action=queryUserById&amp;method=addUser&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 小青男朋友</span><br><span class="line">  <span class="built_in">Date</span>: <span class="number">2020</span>/<span class="number">12</span>/<span class="number">24</span></span><br><span class="line">  Time: 下午 <span class="number">4</span>:<span class="number">47</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;userServlet?action=page&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="马上就大功告成了，就差，导JAR包了"><a href="#马上就大功告成了，就差，导JAR包了" class="headerlink" title="马上就大功告成了，就差，导JAR包了"></a>马上就大功告成了，就差，导JAR包了</h1><p>步骤：</p>
<p><strong>Flie》Project Structure》Liberals》＋》Java》找到自己放jar包的地方》选中》OK》取个名字》OK</strong></p>
<p>这个是需要的Jar包，我的gitee仓库也里有Jar包。</p>
<p><a href="https://imgchr.com/i/r2yAr4"><img src="https://s3.ax1x.com/2020/12/24/r2yAr4.png" alt="r2yAr4.png"></a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>项目地址：<a href="https://gitee.com/cxq21/user-manage">https://gitee.com/cxq21/user-manage</a></p>
<p>项目下载地址：<a href="https://gitee.com/cxq21/user-manage/repository/archive/master.zip">https://gitee.com/cxq21/user-manage/repository/archive/master.zip</a></p>
<p>作者：<a href="https://cxq21.gitee.io/">LIEFox</a>  zjh</p>
]]></content>
      <categories>
        <category>JAVA案例</category>
      </categories>
      <tags>
        <tag>案例记录</tag>
      </tags>
  </entry>
  <entry>
    <title>三大框架</title>
    <url>/posts/367339a6.html</url>
    <content><![CDATA[<h1 id="一、Mybatis"><a href="#一、Mybatis" class="headerlink" title="一、Mybatis"></a>一、Mybatis</h1><ol>
<li>什么是Mybatis？</li>
</ol>
<p>半自动映射的数据持久层框架、ORM框架。</p>
<p>2.</p>
]]></content>
  </entry>
  <entry>
    <title>解压开车</title>
    <url>/posts/a4acce0b.html</url>
    <content><![CDATA[<h2 id="等待加载，点击START进入游戏。建议WASD操作，不要用上下左右方向键操作。"><a href="#等待加载，点击START进入游戏。建议WASD操作，不要用上下左右方向键操作。" class="headerlink" title="等待加载，点击START进入游戏。建议WASD操作，不要用上下左右方向键操作。"></a>等待加载，点击START进入游戏。建议WASD操作，不要用上下左右方向键操作。</h2></iframe><div style="position: relative; width: 100%; height: 90%; padding-bottom: 100%;"><iframe 
src="https://bruno-simon.com/" scrolling="yes" border="0" 
frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;"> </iframe></div>

<h4 id="LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈"><a href="#LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈" class="headerlink" title="LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈"></a>LIEFox加入了很多实用有趣的小工具，链接在这👉<a href="https://cxq21.gitee.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/" target="_blank">实用工具传送门</a>👈</h4><p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGL流体效果</title>
    <url>/posts/3731d3f9.html</url>
    <content><![CDATA[<p>WebGL流体效果，拖动鼠标即可展现炫酷的流体动画，可以截图用来做背景，发挥自己的创造力。。。《Close Controls》可以关闭菜单，自己研究英语。<strong>（显示不出的话，就刷新一下）</strong></p>
<div style="position: relative; width: 100%; height: 100%; padding-bottom: 100%;"><iframe 
src="https://paveldogreat.github.io/WebGL-Fluid-Simulation/" scrolling="yes" border="0" 
frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;"> </iframe></div>


<h4 id="LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈"><a href="#LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈" class="headerlink" title="LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈"></a>LIEFox加入了很多实用有趣的小工具，链接在这👉<a href="https://cxq21.gitee.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/" target="_blank">实用工具传送门</a>👈</h4><p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>解压小虫子</title>
    <url>/posts/b50949c5.html</url>
    <content><![CDATA[<p>还有这个蠕动的虫，随着你的鼠标（或手指），会有不同得变化，简直不要太魔性！</p>
<p><strong>点击快的话，还能有段鬼畜，试试就知道。哈哈哈，能骗一个是一个。</strong></p>
<div style="position: relative; width: 100%; height: 100%; padding-bottom: 100%;"><iframe 
src="http://www.staggeringbeauty.com/" scrolling="yes" border="0" 
frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;"> </iframe></div>

<h4 id="LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈"><a href="#LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈" class="headerlink" title="LIEFox加入了很多实用有趣的小工具，链接在这👉实用工具传送门👈"></a>LIEFox加入了很多实用有趣的小工具，链接在这👉<a href="https://cxq21.gitee.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/" target="_blank">实用工具传送门</a>👈</h4><p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>VIP电影</title>
    <url>/posts/78a19d7.html</url>
    <content><![CDATA[<h1 id="高清电影在线观看"><a href="#高清电影在线观看" class="headerlink" title="高清电影在线观看"></a>高清电影在线观看</h1><div style="position: relative; width: 100%; height: 100%; padding-bottom: 100%;"><iframe 
src="https://www.o8tv.com/" scrolling="yes" border="0" 
frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;"> </iframe></div>
#### LIEFox加入了很多实用有趣的小工具，链接在这👉<a href="https://cxq21.gitee.io/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/" target="_blank">实用工具传送门</a>👈

<p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>JS期末网站</title>
    <url>/posts/48b82e1f.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="感谢支持LIEFox的小伙伴们，前些天都在忙考证，没时间更新文章，昨天被小伙伴催更了，所以今天站长把这次JS的期末测试的项目分享给大家，顺便水一篇文章。"><a href="#感谢支持LIEFox的小伙伴们，前些天都在忙考证，没时间更新文章，昨天被小伙伴催更了，所以今天站长把这次JS的期末测试的项目分享给大家，顺便水一篇文章。" class="headerlink" title="感谢支持LIEFox的小伙伴们，前些天都在忙考证，没时间更新文章，昨天被小伙伴催更了，所以今天站长把这次JS的期末测试的项目分享给大家，顺便水一篇文章。"></a>感谢支持LIEFox的小伙伴们，前些天都在忙考证，没时间更新文章，昨天被小伙伴催更了，所以今天站长把这次JS的期末测试的项目分享给大家，顺便水一篇文章。</h2><p>偷偷告诉你们，LIEFox已经破2000访客了。加油</p>
<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><ul>
<li>项目名：LIEFoxmini</li>
<li>运用技术：Html+css+jss</li>
<li>运用框架：Layui</li>
<li>花费时间：4小时</li>
</ul>
<p>咱们先来看看index效果图<strong>（还不兼容手机端这个网页，建议电脑端打开，或者手机浏览器访问电脑版）</strong></p>
<p><a href="https://imgchr.com/i/r8Rrr9"><img src="https://s3.ax1x.com/2020/12/17/r8Rrr9.md.png" alt="r8Rrr9.md.png"></a></p>
<p>这个mini网站，动态效果还是很足的。由一个导航栏，轮播图，视频播放器，还有一个相册。</p>
<p><a href="http://cxq21.gitee.io/liefoxmini/"><img src="https://s3.ax1x.com/2020/12/17/r84SqH.png" alt="r84SqH.png" style="zoom:50%;" /></a></p>
<h2 id="点上面这个图标就可以在线预览网站喔，没错，就是上面这个眼睛！"><a href="#点上面这个图标就可以在线预览网站喔，没错，就是上面这个眼睛！" class="headerlink" title="点上面这个图标就可以在线预览网站喔，没错，就是上面这个眼睛！"></a>点上面这个图标就可以在线预览网站喔，没错，就是上面这个眼睛！</h2><p>由于涉及内容及知识面较广，所以我将直接发源码下载地址分享给大家，感兴趣的伙伴可以去下载地址下载下来，进行学习研究。</p>
<p><a href="https://gitee.com/cxq21/liefoxmini/repository/archive/master.zip" target="_blank">源码下载地址</a>点击链接进行人机判断就可以下载了。</p>
<p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>JS案例</category>
      </categories>
      <tags>
        <tag>案例记录</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象基础</title>
    <url>/posts/9d9ad23f.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="（1）面向对象的概念"><a href="#（1）面向对象的概念" class="headerlink" title="（1）面向对象的概念"></a>（1）面向对象的概念</h1><p>面向对象是一种符合人类思维的编程思想，将万物比作对象，说一个栗子：</p>
<p><strong>把大象装进冰箱需要几步</strong></p>
<p>三步</p>
<ol>
<li>打开冰箱</li>
<li>装进大象</li>
<li>关上冰箱门</li>
</ol>
<p><strong>这个是一个典型的面向过程的编程思想，把这个事情，像成敲java代码，如果换成装狐狸，那也要重新写一遍代码，将狐狸放进冰箱，执行三步，如果又换把狐狸放进笼子里呢，又要重新写一遍。所以为了解决事情的重复性，就有了面向对象思想。</strong></p>
<p>就可以将装进某件事物封装成一个对象，只需要改动一点点，就可以实现这个功能。。。。</p>
<p>而面向对象有三个特点：</p>
<p>1.封装性</p>
<p>封装性是将对象的属性和行为封装起来，然后不需要让用户知道他是怎么执行的，只需要改变对应的参数，就可以实现用户想要达到的功能。</p>
<p>2.继承性</p>
<p>继承性主要讲的是类与类之间的关系，可以通过继承将代码的冗余降低。用最少的代码，做更多的功能。</p>
<p>3.多态性</p>
<p>多态性是指程序之间允许出现重名的现象。在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）。</p>
]]></content>
      <categories>
        <category>JAVA笔记</category>
      </categories>
      <tags>
        <tag>JAVA笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>数组控制</title>
    <url>/posts/335f9f1b.html</url>
    <content><![CDATA[<p>本节我们将讲解对数组的操作，包括：</p>
<ul>
<li>遍历；</li>
<li>排序。</li>
</ul>
<p>以及多维数组的概念。</p>
<hr>
<p>[TOC]</p>
<h1 id="（1）数组遍历"><a href="#（1）数组遍历" class="headerlink" title="（1）数组遍历"></a>（1）数组遍历</h1><p>数组遍历有两种方法：</p>
<p>1、for循环</p>
<p>2、for each循环</p>
<p>一一道来；</p>
<p>for循环来遍历数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[]num =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">42</span>,<span class="number">11</span>,<span class="number">90</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length;i++)&#123;</span><br><span class="line">    System.out.print(num[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;<span class="comment">//打印 1 2 23 42 11 90</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>如果循环索引超过数组的长度会报空指针异常（ArrayIndexOutOfBoundsException）。为了避免，我们应该注意索引不要超过数组长度，举个栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[]num =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">42</span>,<span class="number">11</span>,<span class="number">90</span>&#125;; <span class="comment">//num.length=6,不可超过6，所以一般遍历的时候，循环条件都会是i&lt;num.length</span></span><br></pre></td></tr></table></figure>

<p>for each 遍历</p>
<p>for each 是一种循环数组更简单一点的方法，只不过他只可以读取数据，不可以像for遍历改变或写入数组里的数据。但只是遍历数组的数据的时候，却很好用。上才艺：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[]num =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">42</span>,<span class="number">11</span>,<span class="number">90</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n:num)&#123;</span><br><span class="line">    sout(n);</span><br><span class="line">&#125;<span class="comment">//打印 1 2 23 42 11 90</span></span><br></pre></td></tr></table></figure>

<h1 id="（2）排序"><a href="#（2）排序" class="headerlink" title="（2）排序"></a>（2）排序</h1><p>讲到排序，比较经典的是冒泡排序了，就是将数组里的数值像水里的气泡一样，从下往上冒</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">        <span class="comment">// 排序前:</span></span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ns.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ns.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ns[j] &gt; ns[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">// 交换ns[j]和ns[j+1]:</span></span><br><span class="line">                    <span class="keyword">int</span> tmp = ns[j];</span><br><span class="line">                    ns[j] = ns[j+<span class="number">1</span>];</span><br><span class="line">                    ns[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序后:</span></span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;<span class="comment">//[28, 12, 89, 73, 65, 18, 96, 50, 8, 36]</span></span><br><span class="line">	<span class="comment">//[8, 12, 18, 28, 36, 50, 65, 73, 89, 96]	</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>冒泡排序的特点是，每一轮循环后，最大的一个数被交换到末尾，因此，下一轮循环就可以“刨除”最后的数，每一轮循环都比上一轮循环的结束位置靠前一位。</p>
<p>另外，注意到交换两个变量的值必须借助一个临时变量。</p>
<p>正确的写法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int x &#x3D; 1;</span><br><span class="line">int y &#x3D; 2;</span><br><span class="line"></span><br><span class="line">int t &#x3D; x; &#x2F;&#x2F; 把x的值保存在临时变量t中, t现在是1</span><br><span class="line">x &#x3D; y; &#x2F;&#x2F; x现在是2</span><br><span class="line">y &#x3D; t; &#x2F;&#x2F; y现在是t的值1</span><br></pre></td></tr></table></figure>

<p>实际上，Java的标准库已经内置了排序功能，我们只需要调用JDK提供的<code>Arrays.sort()</code>就可以排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">    Arrays.sort(ns);</span><br><span class="line">    System.out.println(Arrays.toString(ns));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>必须注意，对数组排序实际上修改了数组本身。例如，排序前的数组是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ns = &#123; <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>在内存中，这个整型数组表示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      ┌───┬───┬───┬───┐</span><br><span class="line">ns───&gt;│ 9 │ 3 │ 6 │ 5 │</span><br><span class="line">      └───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>当我们调用<code>Arrays.sort(ns);</code>后，这个整型数组在内存中变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      ┌───┬───┬───┬───┐</span><br><span class="line">ns───&gt;│ 3 │ 5 │ 6 │ 9 │</span><br><span class="line">      └───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>即变量<code>ns</code>指向的数组内容已经被改变了。</p>
<p>如果对一个字符串数组进行排序，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] ns = &#123; <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>排序前，这个数组在内存中表示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                   ┌──────────────────────────────────┐</span><br><span class="line">               ┌───┼──────────────────────┐           │</span><br><span class="line">               │   │                      ▼           ▼</span><br><span class="line">         ┌───┬─┴─┬─┴─┬───┬────────┬───┬───────┬───┬──────┬───┐</span><br><span class="line">ns ─────&gt;│░░░│░░░│░░░│   │&quot;banana&quot;│   │&quot;apple&quot;│   │&quot;pear&quot;│   │</span><br><span class="line">         └─┬─┴───┴───┴───┴────────┴───┴───────┴───┴──────┴───┘</span><br><span class="line">           │                 ▲</span><br><span class="line">           └─────────────────┘</span><br></pre></td></tr></table></figure>

<p>调用<code>Arrays.sort(ns);</code>排序后，这个数组在内存中表示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                   ┌──────────────────────────────────┐</span><br><span class="line">               ┌───┼──────────┐                       │</span><br><span class="line">               │   │          ▼                       ▼</span><br><span class="line">         ┌───┬─┴─┬─┴─┬───┬────────┬───┬───────┬───┬──────┬───┐</span><br><span class="line">ns ─────&gt;│░░░│░░░│░░░│   │&quot;banana&quot;│   │&quot;apple&quot;│   │&quot;pear&quot;│   │</span><br><span class="line">         └─┬─┴───┴───┴───┴────────┴───┴───────┴───┴──────┴───┘</span><br><span class="line">           │                              ▲</span><br><span class="line">           └──────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>原来的3个字符串在内存中均没有任何变化，但是<code>ns</code>数组的每个元素指向变化了。</p>
<p>[TOC]</p>
<h1 id="（3）多维数组"><a href="#（3）多维数组" class="headerlink" title="（3）多维数组"></a>（3）多维数组</h1><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组就是数组的数组。定义一个二维数组如下：</p>
<h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ns = &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">            &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(ns.length); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] [] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>] [<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> [<span class="number">0</span>] [] =&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> [<span class="number">1</span>] [] =&#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>  &#125;;</span><br><span class="line"><span class="keyword">int</span> [<span class="number">2</span>] [] =&#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] [] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>] [];</span><br><span class="line"><span class="keyword">int</span> [<span class="number">0</span>] [] =&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> [<span class="number">1</span>] [] =&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> [<span class="number">2</span>] [] =&#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>因为<code>ns</code>包含3个数组，因此，<code>ns.length</code>为<code>3</code>。实际上<code>ns</code>在内存中的结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                    ┌───┬───┬───┬───┐</span><br><span class="line">         ┌───┐  ┌──&gt;│ 1 │ 2 │ 3 │ 4 │</span><br><span class="line">ns ─────&gt;│░░░│──┘   └───┴───┴───┴───┘</span><br><span class="line">         ├───┤      ┌───┬───┬───┬───┐</span><br><span class="line">         │░░░│─────&gt;│ 5 │ 6 │ 7 │ 8 │</span><br><span class="line">         ├───┤      └───┴───┴───┴───┘</span><br><span class="line">         │░░░│──┐   ┌───┬───┬───┬───┐</span><br><span class="line">         └───┘  └──&gt;│ 9 │10 │11 │12 │</span><br><span class="line">                    └───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>要打印一个二维数组，可以使用两层嵌套的for循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] arr : ns) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">        System.out.print(n);</span><br><span class="line">        System.out.print(<span class="string">&#x27;, &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h3><p>三维数组就是二维数组的数组。可以这么定义一个三维数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[][][] ns &#x3D; &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;1, 2, 3&#125;,</span><br><span class="line">        &#123;4, 5, 6&#125;,</span><br><span class="line">        &#123;7, 8, 9&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;10, 11&#125;,</span><br><span class="line">        &#123;12, 13&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;14, 15, 16&#125;,</span><br><span class="line">        &#123;17, 18&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>它在内存中的结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                              ┌───┬───┬───┐</span><br><span class="line">                   ┌───┐  ┌──&gt;│ 1 │ 2 │ 3 │</span><br><span class="line">               ┌──&gt;│░░░│──┘   └───┴───┴───┘</span><br><span class="line">               │   ├───┤      ┌───┬───┬───┐</span><br><span class="line">               │   │░░░│─────&gt;│ 4 │ 5 │ 6 │</span><br><span class="line">               │   ├───┤      └───┴───┴───┘</span><br><span class="line">               │   │░░░│──┐   ┌───┬───┬───┐</span><br><span class="line">        ┌───┐  │   └───┘  └──&gt;│ 7 │ 8 │ 9 │</span><br><span class="line">ns ────&gt;│░░░│──┘              └───┴───┴───┘</span><br><span class="line">        ├───┤      ┌───┐      ┌───┬───┐</span><br><span class="line">        │░░░│─────&gt;│░░░│─────&gt;│10 │11 │</span><br><span class="line">        ├───┤      ├───┤      └───┴───┘</span><br><span class="line">        │░░░│──┐   │░░░│──┐   ┌───┬───┐</span><br><span class="line">        └───┘  │   └───┘  └──&gt;│12 │13 │</span><br><span class="line">               │              └───┴───┘</span><br><span class="line">               │   ┌───┐      ┌───┬───┬───┐</span><br><span class="line">               └──&gt;│░░░│─────&gt;│14 │15 │16 │</span><br><span class="line">                   ├───┤      └───┴───┴───┘</span><br><span class="line">                   │░░░│──┐   ┌───┬───┐</span><br><span class="line">                   └───┘  └──&gt;│17 │18 │</span><br><span class="line">                              └───┴───┘</span><br></pre></td></tr></table></figure>

<p>如果我们要访问三维数组的某个元素，例如，<code>ns[2][0][1]</code>，只需要顺着定位找到对应的最终元素<code>15</code>即可。</p>
<p>理论上，我们可以定义任意的N维数组。但在实际应用中，除了二维数组在某些时候还能用得上，更高维度的数组很少使用。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>二维数组就是数组的数组，三维数组就是二维数组的数组；</p>
<p>多维数组的每个数组元素长度都不要求相同；</p>
<p>最常见的多维数组是二维数组，访问二维数组的一个元素使用<code>array[row][col]</code>。</p>
<p>[TOC]</p>
<p>。。。。。。。。。。</p>
<p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>JAVA笔记</category>
      </categories>
      <tags>
        <tag>JAVA笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制</title>
    <url>/posts/368ebfeb.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="（1）选择结构语句"><a href="#（1）选择结构语句" class="headerlink" title="（1）选择结构语句"></a>（1）选择结构语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>if语句格式是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件语句)&#123;</span><br><span class="line">	代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>条件语句里是只可以放布尔值，当为true是，执行代码块里的，反之。举个栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(i);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h2><p>当判断条件为true时，执行if语句的。如果为false执行else里的。</p>
<p>语法格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)&#123;</span><br><span class="line">	执行语句</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个栗子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span>(i&gt;<span class="number">2</span>)&#123;<span class="comment">//false</span></span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;执行else&quot;</span>);<span class="comment">//打印执行else</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>还有一种三元运算，类似if…else：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">判断条件？表达式1：表达式2</span><br></pre></td></tr></table></figure>

<p>当判断条件为true时，执行冒号前面的，反之，执行冒号后面的。</p>
<h2 id="if…else-if…else语句"><a href="#if…else-if…else语句" class="headerlink" title="if…else if…else语句"></a>if…else if…else语句</h2><p>该语句根据多种判断结果，执行相应结果。</p>
<p>语法格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)&#123;</span><br><span class="line">	执行语句</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断条件)&#123;</span><br><span class="line">	执行语句</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	执行语句。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个栗子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">11</span>)&#123;</span><br><span class="line">	sout(<span class="string">&quot;执行语句&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">	sout(<span class="string">&quot;LIEFox&quot;</span>);<span class="comment">//最后打印出来的结果是LIEFox</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	sout(<span class="string">&quot;FOX&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>语法格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               执行语句<span class="number">1</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               执行语句<span class="number">2</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               执行语句<span class="number">3</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               执行语句<span class="number">4</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>如果不break，将不会结束语句，会执行下一个语句。举个栗子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">2</span>)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               sout(<span class="number">1</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               sout(<span class="number">2</span>);</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               sout(<span class="number">3</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               sout(<span class="number">4</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">/*结果为23。因为表达式为2，就从case 2 开始执行，</span></span><br><span class="line"><span class="comment">打印2、又因为没有break，不会跳出循环，就会继续执</span></span><br><span class="line"><span class="comment">行case 3 里的语句，直到break跳出语句。*/</span></span><br></pre></td></tr></table></figure>

<p>switch在JDK7.0的时候，加入了可以判断String类型。</p>
<p>switch中还加入了简单的写法，因为有些情况，case1、2、3都有可能结果相同，所以可以这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">2</span>)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               sout(<span class="number">3</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               sout(<span class="number">4</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;<span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure>

<hr>
<p>[TOC]</p>
<h1 id="（2）循环结构语句"><a href="#（2）循环结构语句" class="headerlink" title="（2）循环结构语句"></a>（2）循环结构语句</h1><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p>语法格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环条件)&#123;</span><br><span class="line">	执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环条件里依旧，true就执行，false就停止。</p>
<p>举个栗子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (i&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       结果<span class="comment">/*i=1</span></span><br><span class="line"><span class="comment">            i=2</span></span><br><span class="line"><span class="comment">            i=3</span></span><br><span class="line"><span class="comment">            i=4</span></span><br><span class="line"><span class="comment">            i=5*/</span></span><br></pre></td></tr></table></figure>

<h2 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h2><p>语法格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	执行语句</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件)</span><br></pre></td></tr></table></figure>

<p>可见，<code>do while</code>循环会至少循环一次。</p>
<p>我们把对1到100的求和用<code>do while</code>循环改写一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum = sum + n;</span><br><span class="line">            n ++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (n &lt;= <span class="number">100</span>);</span><br><span class="line">        System.out.println(sum);<span class="comment">//结果为5050</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>do while</code>循环先执行循环，再判断条件；</p>
<p><code>do while</code>循环会至少执行一次。</p>
<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>语法格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式;循环条件;操作表达式)&#123;</span><br><span class="line">	执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个栗子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;=<span class="number">7</span>;i++)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;LIEFox&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//将会打印7次LIEFox</span></span><br></pre></td></tr></table></figure>

<p>执行顺序是这样的》</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.起始位置从i&#x3D;0开始，“0&lt;&#x3D;7”为true，打印LIEFox，回到i++,i&#x3D;1。</span><br><span class="line">2.i&#x3D;1,&quot;1&lt;&#x3D;7&quot;为true，打印LIEFox，回到i++,i&#x3D;2。</span><br><span class="line">。。。。。</span><br><span class="line">7.i&#x3D;7,&quot;7&lt;&#x3D;7&quot;为true，打印LIEFox，回到i++,i&#x3D;8。</span><br><span class="line">8.i&#x3D;8,&quot;8&lt;&#x3D;7&quot;为false，循环结束。</span><br></pre></td></tr></table></figure>

<h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>所谓循环嵌套，指的是多种控制语句相组合，实现自己想要的功能。</p>
<p>就简单的两层for循环，就可以实现一个美妙的形状组成的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x =i;x&lt;=<span class="number">5</span>;x++)&#123;</span><br><span class="line">                 System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">******</span><br><span class="line">*****</span><br><span class="line">****</span><br><span class="line">***</span><br><span class="line">**</span><br><span class="line">*</span><br></pre></td></tr></table></figure>

<p>运行到第二层的for循环，因为最后i=x=6；6&lt;=5=false,就停止打印*</p>
<p><a href="https://imgchr.com/i/rpcv5R"><img src="https://s3.ax1x.com/2020/12/08/rpcv5R.png" alt="rpcv5R.png"></a></p>
<h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><p>break和continue</p>
<p>break：在之前的switch控制语句就用到了，执行到break，就结束循环。</p>
<p>continue：是跳出本次循环。</p>
<p>举个continue的栗子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;begin i = &quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// continue语句会结束本次循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">            System.out.println(<span class="string">&quot;end i = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum); <span class="comment">// 9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">begin i = <span class="number">1</span></span><br><span class="line">end i = <span class="number">1</span></span><br><span class="line">begin i = <span class="number">2</span></span><br><span class="line">begin i = <span class="number">3</span></span><br><span class="line">end i = <span class="number">3</span></span><br><span class="line">begin i = <span class="number">4</span></span><br><span class="line">begin i = <span class="number">5</span></span><br><span class="line">end i = <span class="number">5</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>注意观察<code>continue</code>语句的效果。当<code>i</code>为奇数时，完整地执行了整个循环，因此，会打印<code>begin i=1</code>和<code>end i=1</code>。在i为偶数时，<code>continue</code>语句会提前结束本次循环，因此，会打印<code>begin i=2</code>但不会打印<code>end i = 2</code>。</p>
<p>在多层嵌套的循环中，<code>continue</code>语句同样是结束本次自己所在的循环。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><code>break</code>语句可以跳出当前循环；</p>
<p><code>break</code>语句通常配合<code>if</code>，在满足条件时提前结束整个循环；</p>
<p><code>break</code>语句总是跳出最近的一层循环；</p>
<p><code>continue</code>语句可以提前结束本次循环；</p>
<p><code>continue</code>语句通常配合<code>if</code>，在满足条件时提前结束本次循环。</p>
<hr>
<p>。。。。。。。</p>
<p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>JAVA笔记</category>
      </categories>
      <tags>
        <tag>JAVA笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java程序基础</title>
    <url>/posts/bdfde94f.html</url>
    <content><![CDATA[<h1 id="1-Java程序基础"><a href="#1-Java程序基础" class="headerlink" title="(1)Java程序基础"></a>(1)Java程序基础</h1><p>本节我们将介绍Java程序的基础知识，包括：</p>
<ul>
<li><p>Java程序基本结构</p>
</li>
<li><p>进制转化</p>
</li>
<li><p>变量和数据类型</p>
</li>
<li><p>Java中的运算符</p>
</li>
<li><p>字符和字符串</p>
</li>
<li><p>数组类型</p>
<hr>
<p>[TOC]</p>
</li>
</ul>
<h1 id="2-Java程序基本结构"><a href="#2-Java程序基本结构" class="headerlink" title="(2)Java程序基本结构"></a>(2)Java程序基本结构</h1><p>我们先剖析一个完整的Java程序，它的基本结构是什么：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以用来自动创建文档的注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向屏幕输出文本:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, LIEFox!&quot;</span>);</span><br><span class="line">        <span class="comment">/* 多行注释开始</span></span><br><span class="line"><span class="comment">        注释内容</span></span><br><span class="line"><span class="comment">        注释结束 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// class定义结束</span></span><br></pre></td></tr></table></figure>

<p>因为Java是面向对象的语言，一个程序的基本单位就是<code>class</code>，<code>class</code>是关键字，这里定义的<code>class</code>名字就是<code>Hello</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123; <span class="comment">// 类名是Hello</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="comment">// class定义结束</span></span><br></pre></td></tr></table></figure>

<p>类名要求：</p>
<ul>
<li>类名必须以英文字母开头，后接字母，数字和下划线的组合</li>
<li>习惯以大写字母开头</li>
</ul>
<p>要注意遵守命名习惯，好的类命名：</p>
<ul>
<li>Hello</li>
<li>NoteBook</li>
<li>LIEFox</li>
</ul>
<p>不好的类命名：</p>
<ul>
<li>hello</li>
<li>Good123</li>
<li>Note_Book</li>
<li>_World</li>
</ul>
<p>注意到<code>public</code>是访问修饰符，表示该<code>class</code>是公开的。</p>
<p>不写<code>public</code>，也能正确编译，但是这个类将无法从命令行执行。</p>
<p>在<code>class</code>内部，可以定义若干方法（method）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 方法名是main</span></span><br><span class="line">        <span class="comment">// 方法代码...</span></span><br><span class="line">    &#125; <span class="comment">// 方法定义结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法定义了一组执行语句，方法内部的代码将会被依次顺序执行。</p>
<p>这里的方法名是<code>main</code>，返回值是<code>void</code>，表示没有任何返回值。</p>
<p>我们注意到<code>public</code>除了可以修饰<code>class</code>外，也可以修饰方法。而关键字<code>static</code>是另一个修饰符，它表示静态方法，后面我们会讲解方法的类型，目前，我们只需要知道，Java入口程序规定的方法必须是静态方法，方法名必须为<code>main</code>，括号内的参数必须是String数组。</p>
<p>方法名也有命名规则，命名和<code>class</code>一样，但是首字母小写：</p>
<p>好的方法命名：</p>
<ul>
<li>main</li>
<li>goodMorning</li>
<li>LIEFox</li>
</ul>
<p>不好的方法命名：</p>
<ul>
<li>Main</li>
<li>good123</li>
<li>good_morning</li>
<li>_playVR</li>
</ul>
<p>在方法内部，语句才是真正的执行代码。Java的每一行语句必须以分号结束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, LIEFox!&quot;</span>); <span class="comment">// 语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Java程序中，注释是一种给人阅读的文本，不是程序的一部分，所以编译器会自动忽略注释。</p>
<p>Java有3种注释，第一种是单行注释，以双斜线开头，直到这一行的结尾结束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是注释...</span></span><br></pre></td></tr></table></figure>

<p>而多行注释以<code>/*</code>星号开头，以<code>*/</code>结束，可以有多行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是注释</span></span><br><span class="line"><span class="comment">LIEFox LIEFox...</span></span><br><span class="line"><span class="comment">这也是注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>还有一种特殊的多行注释，以<code>/**</code>开头，以<code>*/</code>结束，如果有多行，每行通常以星号开头：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以用来自动创建文档的注释</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> zjh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, LIEFox!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种特殊的多行注释需要写在类和方法的定义处，可以用于自动创建文档。</p>
<p>Java程序对格式没有明确的要求，多几个空格或者回车不影响程序的正确性，但是我们要养成良好的编程习惯，注意遵守Java社区约定的编码格式。</p>
<p>那约定的编码格式有哪些要求呢？其实我们在前面介绍的Eclipse IDE提供了快捷键<code>Ctrl+Shift+F</code>（macOS是<code>⌘+⇧+F</code>）帮助我们快速格式化代码的功能，Eclipse就是按照约定的编码格式对代码进行格式化的，所以只需要看看格式化后的代码长啥样就行了。具体的代码格式要求可以在Eclipse的设置中<code>Java</code>-<code>Code Style</code>查看。</p>
<p>[TOC]</p>
<hr>
<h1 id="3-进制转化"><a href="#3-进制转化" class="headerlink" title="(3)进制转化"></a>(3)进制转化</h1><h3 id="进制的由来"><a href="#进制的由来" class="headerlink" title="进制的由来"></a>进制的由来</h3><p>进制就是进位制，是人们规定的一种进制方法。对于任何一种进制来说，都是逢X进一。</p>
<p>比如：</p>
<ul>
<li>二进制：逢二进一</li>
<li>八进制：逢八进一</li>
<li>十进制：逢十进一</li>
<li>十六进制：逢十六进一</li>
</ul>
<p>二进制这个东西其实最早的来源于中国的《易经》，《易经》中的八卦算法，是靠二进制来推算来的。然后被一个西方的传道士将《易经》带到了欧洲，然后其中一个人看了其中的八卦算法的二进制变成了现在的机器语言，也就是<strong>00000000000111111111111111</strong>“0”是低电压，“1”是高电压。</p>
<p>后来数据量大，二进制在人们看起来会吃力，就有了八进制等等。</p>
<h3 id="进制的表现形式"><a href="#进制的表现形式" class="headerlink" title="进制的表现形式"></a>进制的表现形式</h3><ul>
<li>二进制：由0和1组成，0b表示二进制，例如：0b101</li>
<li>八进制：由0~7组成，0表示八进制，例如：07</li>
<li>十进制：由0~9组成。</li>
<li>十六进制：由0<del>9</del>a（10）~f(15)组成，0x表示十六进制，例如：0x</li>
</ul>
<h3 id="进制之间的转化"><a href="#进制之间的转化" class="headerlink" title="进制之间的转化"></a>进制之间的转化</h3><h4 id="1-十进制转二进制（图略丑）"><a href="#1-十进制转二进制（图略丑）" class="headerlink" title="1.十进制转二进制（图略丑）"></a>1.十进制转二进制（图略丑）</h4><p>124转二进制（0b1111100）</p>
<p><strong>记住从下往上写</strong></p>
<p><a href="https://imgchr.com/i/DxxU1S"><img src="https://s3.ax1x.com/2020/12/07/DxxU1S.md.png" alt="DxxU1S.md.png"></a></p>
<h4 id="2-二进制转十进制"><a href="#2-二进制转十进制" class="headerlink" title="2.二进制转十进制"></a>2.二进制转十进制</h4><p>1111100转十进制（124）</p>
<p><strong>角标为0和1的0，0不用计算，没有意义，如果中间有0的话也不用计算，注意：角标不要看错了</strong></p>
<p><a href="https://imgchr.com/i/DzC7lV"><img src="https://s3.ax1x.com/2020/12/07/DzC7lV.md.png" alt="DzC7lV.md.png"></a></p>
<h4 id="3-十六进制转2、8、10进制"><a href="#3-十六进制转2、8、10进制" class="headerlink" title="3.十六进制转2、8、10进制"></a>3.十六进制转2、8、10进制</h4><p>这个呢，建议背表，会计算起来如虎添翼。但记下怎么计算得来的数据会更好！</p>
<p><strong>注意：0x表示十六进制</strong></p>
<p><a href="https://imgchr.com/i/DzF8Wn"><img src="https://s3.ax1x.com/2020/12/07/DzF8Wn.png" alt="DzF8Wn.png"></a></p>
<p>[TOC]</p>
<h3 id="计算机常用存储单位"><a href="#计算机常用存储单位" class="headerlink" title="计算机常用存储单位"></a>计算机常用存储单位</h3><p>计算机中最小的单位是Bit（位），八位等于一个字节。</p>
<p><a href="https://imgchr.com/i/DzkJtH"><img src="https://s3.ax1x.com/2020/12/07/DzkJtH.png" alt="DzkJtH.png"></a></p>
<p>[TOC]</p>
<h3 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h3><p>人脑可以知道第一位是符号位，但计算机判断起来却很复杂，所以人们将加减乘除放在了运算里，减去一个数，等于加上他的负数，0代表正数，1代表负数，第一位数代表符号数。</p>
<table>
<thead>
<tr>
<th align="center">(8位)</th>
<th align="left">正数(第一位为0为正数)</th>
<th align="left">负数(第一位为1为负数)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">原码</td>
<td align="left">00000001</td>
<td align="left">10000001(符号位不变,其余各位不变)</td>
</tr>
<tr>
<td align="center">反码</td>
<td align="left">00000001</td>
<td align="left">11111110(符号位不变,其余各位取反)</td>
</tr>
<tr>
<td align="center">补码</td>
<td align="left">00000001</td>
<td align="left">11111111(符号位不变,其余各位取反后加1)</td>
</tr>
</tbody></table>
<p>计算机所用的就是<strong>补码</strong>，对补码取反加1就是原码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11111111</span><br><span class="line">    ↓</span><br><span class="line">10000001</span><br></pre></td></tr></table></figure>



<hr>
<p>[TOC]</p>
<h1 id="4-变量和数据类型"><a href="#4-变量和数据类型" class="headerlink" title="(4)变量和数据类型"></a>(4)变量和数据类型</h1><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>什么是变量？</p>
<p>变量就是初中数学的代数的概念，例如一个简单的方程，x，y都是变量：</p>
<p>y=x^2+1<em>y</em>=<em>x</em>2+1</p>
<p>在Java中，变量分为两种：基本类型的变量和引用类型的变量。</p>
<p>我们先讨论基本类型的变量。</p>
<p>在Java中，变量必须先定义后使用，在定义变量的时候，可以给它一个初始值。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int x &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>上述语句定义了一个整型<code>int</code>类型的变量，名称为<code>x</code>，初始值为<code>1</code>。</p>
<p>不写初始值，就相当于给它指定了默认值。默认值总是<code>0</code>。</p>
<p>来看一个完整的定义变量，然后打印变量值的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义并打印变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">100</span>; <span class="comment">// 定义int类型变量x，并赋予初始值100</span></span><br><span class="line">        System.out.println(x); <span class="comment">// 打印该变量的值,</span></span><br><span class="line">        <span class="comment">//打印结果为100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量的一个重要特点是可以重新赋值。例如，对变量<code>x</code>，先赋值<code>100</code>，再赋值<code>200</code>，观察两次打印的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重新赋值变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">100</span>; <span class="comment">// 定义int类型变量x，并赋予初始值100</span></span><br><span class="line">        System.out.println(x); <span class="comment">// 打印该变量的值，为100</span></span><br><span class="line">        x = <span class="number">200</span>; <span class="comment">// 重新赋值为200</span></span><br><span class="line">        System.out.println(x); <span class="comment">// 打印该变量的值，为200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到第一次定义变量<code>x</code>的时候，需要指定变量类型<code>int</code>，因此使用语句<code>int x = 100;</code>。而第二次重新赋值的时候，变量<code>x</code>已经存在了，不能再重复定义，因此不能指定变量类型<code>int</code>，必须使用语句<code>x = 200;</code>。</p>
<p>变量不但可以重新赋值，还可以赋值给其他变量。让我们来看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量之间的赋值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">100</span>; <span class="comment">// 定义变量n，同时赋值为100</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n = &quot;</span> + n); <span class="comment">// 打印n的值</span></span><br><span class="line"></span><br><span class="line">        n = <span class="number">200</span>; <span class="comment">// 变量n赋值为200</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n = &quot;</span> + n); <span class="comment">// 打印n的值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = n; <span class="comment">// 变量x赋值为n（n的值为200，因此赋值后x的值也是200）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x = &quot;</span> + x); <span class="comment">// 打印x的值</span></span><br><span class="line"></span><br><span class="line">        x = x + <span class="number">100</span>; <span class="comment">// 变量x赋值为x+100（x的值为200，因此赋值后x的值是200+100=300）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x = &quot;</span> + x); <span class="comment">// 打印x的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n = &quot;</span> + n); <span class="comment">// 再次打印n的值，n应该是200还是300？</span></span><br><span class="line">        <span class="comment">//n=200</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们一行一行地分析代码执行流程：</p>
<p>执行<code>int n = 100;</code>，该语句定义了变量<code>n</code>，同时赋值为<code>100</code>，因此，JVM在内存中为变量<code>n</code>分配一个“存储单元”，填入值<code>100</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      n</span><br><span class="line">      │</span><br><span class="line">      ▼</span><br><span class="line">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">│   │100│   │   │   │   │   │</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>执行<code>n = 200;</code>时，JVM把<code>200</code>写入变量<code>n</code>的存储单元，因此，原有的值被覆盖，现在<code>n</code>的值为<code>200</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      n</span><br><span class="line">      │</span><br><span class="line">      ▼</span><br><span class="line">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">│   │200│   │   │   │   │   │</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>执行<code>int x = n;</code>时，定义了一个新的变量<code>x</code>，同时对<code>x</code>赋值，因此，JVM需要<em>新分配</em>一个存储单元给变量<code>x</code>，并写入和变量<code>n</code>一样的值，结果是变量<code>x</code>的值也变为<code>200</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      n           x</span><br><span class="line">      │           │</span><br><span class="line">      ▼           ▼</span><br><span class="line">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">│   │200│   │   │200│   │   │</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>执行<code>x = x + 100;</code>时，JVM首先计算等式右边的值<code>x + 100</code>，结果为<code>300</code>（因为此刻<code>x</code>的值为<code>200</code>），然后，将结果<code>300</code>写入<code>x</code>的存储单元，因此，变量<code>x</code>最终的值变为<code>300</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      n           x</span><br><span class="line">      │           │</span><br><span class="line">      ▼           ▼</span><br><span class="line">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">│   │200│   │   │300│   │   │</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>可见，变量可以反复赋值。注意，等号<code>=</code>是赋值语句，不是数学意义上的相等，否则无法解释<code>x = x + 100</code>。</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型：</p>
<ul>
<li>整数类型：byte，short，int，long</li>
<li>浮点数类型：float，double</li>
<li>字符类型：char</li>
<li>布尔类型：boolean</li>
</ul>
<p>Java定义的这些基本数据类型有什么区别呢？要了解这些区别，我们就必须简单了解一下计算机内存的基本结构。</p>
<p>计算机内存的最小存储单元是字节（byte），一个字节就是一个8位二进制数，即8个bit。它的二进制表示范围从<code>00000000</code><del><code>11111111</code>，换算成十进制是0</del>255，换算成十六进制是<code>00</code>~`ff`。</p>
<p>内存单元从0开始编号，称为内存地址。每个内存单元可以看作一间房间，内存地址就是门牌号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  0   1   2   3   4   5   6  ...</span><br><span class="line">┌───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">│   │   │   │   │   │   │   │...</span><br><span class="line">└───┴───┴───┴───┴───┴───┴───┘</span><br></pre></td></tr></table></figure>

<p>一个字节是1byte，1024字节是1K，1024K是1M，1024M是1G，1024G是1T。一个拥有4T内存的计算机的字节数量就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4T &#x3D; 4 x 1024G</span><br><span class="line">   &#x3D; 4 x 1024 x 1024M</span><br><span class="line">   &#x3D; 4 x 1024 x 1024 x 1024K</span><br><span class="line">   &#x3D; 4 x 1024 x 1024 x 1024 x 1024</span><br><span class="line">   &#x3D; 4398046511104</span><br></pre></td></tr></table></figure>

<p>不同的数据类型占用的字节数不一样。我们看一下Java基本数据类型占用的字节数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       ┌───┐</span><br><span class="line">  byte │   │   1b</span><br><span class="line">       └───┘</span><br><span class="line">       ┌───┬───┐</span><br><span class="line"> short │   │   │   2b</span><br><span class="line">       └───┴───┘</span><br><span class="line">       ┌───┬───┬───┬───┐</span><br><span class="line">   int │   │   │   │   │   4b</span><br><span class="line">       └───┴───┴───┴───┘</span><br><span class="line">       ┌───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">  long │   │   │   │   │   │   │   │   │   8b</span><br><span class="line">       └───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line">       ┌───┬───┬───┬───┐</span><br><span class="line"> float │   │   │   │   │   4b</span><br><span class="line">       └───┴───┴───┴───┘</span><br><span class="line">       ┌───┬───┬───┬───┬───┬───┬───┬───┐</span><br><span class="line">double │   │   │   │   │   │   │   │   │   8b</span><br><span class="line">       └───┴───┴───┴───┴───┴───┴───┴───┘</span><br><span class="line">       ┌───┬───┐</span><br><span class="line">  char │   │   │   2b</span><br><span class="line">       └───┴───┘</span><br></pre></td></tr></table></figure>

<p><code>byte</code>恰好就是一个字节，而<code>long</code>和<code>double</code>需要8个字节。</p>
<h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）。各种整型能表示的最大范围如下：</p>
<ul>
<li><p>byte：-128 ~ 127</p>
</li>
<li><p>short: -32768 ~ 32767</p>
</li>
<li><p>int: -2147483648 ~ 2147483647</p>
</li>
<li><p>long: -9223372036854775808 ~ 9223372036854775807</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> i2 = -<span class="number">2147483648</span>;</span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">2_000_000_000</span>; <span class="comment">// 加下划线更容易识别</span></span><br><span class="line"><span class="keyword">int</span> i4 = <span class="number">0xff0000</span>; <span class="comment">// 十六进制表示的16711680</span></span><br><span class="line"><span class="keyword">int</span> i5 = <span class="number">0b1000000000</span>; <span class="comment">// 二进制表示的512</span></span><br><span class="line"><span class="keyword">long</span> l = <span class="number">9000000000000000000L</span>; <span class="comment">// long型的结尾需要加L</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x102，也可以表示成1.2345x103，所以称为浮点数。</p>
<p>下面是定义浮点数的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">float</span> f2 = <span class="number">3.14e38f</span>; <span class="comment">// 科学计数法表示的3.14x10^38</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.79e308</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = -<span class="number">1.79e308</span>;</span><br><span class="line"><span class="keyword">double</span> d3 = <span class="number">4.9e-324</span>; <span class="comment">// 科学计数法表示的4.9x10^-324</span></span><br></pre></td></tr></table></figure>

<p>对于<code>float</code>类型，需要加上<code>f</code>后缀。</p>
<p>浮点数可表示的范围非常大，<code>float</code>类型可最大表示3.4x1038，而<code>double</code>类型可最大表示1.79x10308。</p>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型<code>boolean</code>只有<code>true</code>和<code>false</code>两个值，布尔类型总是关系运算的计算结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> isGreater = <span class="number">5</span> &gt; <span class="number">3</span>; <span class="comment">// 计算结果为true</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">boolean</span> isAdult = age &gt;= <span class="number">18</span>; <span class="comment">// 计算结果为false</span></span><br></pre></td></tr></table></figure>

<p>Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把<code>boolean</code>表示为4字节整数。</p>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>字符类型<code>char</code>表示一个字符。Java的<code>char</code>类型除了可表示标准的ASCII外，还可以表示一个Unicode字符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> a = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> zh = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        System.out.println(a);<span class="comment">//A</span></span><br><span class="line">        System.out.println(zh);<span class="comment">//中</span></span><br><span class="line">        <span class="comment">//之前还用过这个表白过女孩子哈哈哈？大家去试一下“我爱你”转成int类型会得到什么结果？？？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>char</code>类型使用单引号<code>&#39;</code>，且仅有一个字符，要和双引号<code>&quot;</code>的字符串类型区分开。</p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>除了上述基本类型的变量，剩下的都是引用类型。例如，引用类型最常用的就是<code>String</code>字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; &quot;hello&quot;;</span><br></pre></td></tr></table></figure>

<p>引用类型的变量用的是指针，它内部存储一个“地址”，指向某个对象在内存的位置。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>定义变量的时候，如果加上<code>final</code>修饰符，这个变量就变成了常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">// PI是一个常量</span></span><br><span class="line"><span class="keyword">double</span> r = <span class="number">5.0</span>;</span><br><span class="line"><span class="keyword">double</span> area = PI * r * r;</span><br><span class="line">PI = <span class="number">300</span>; <span class="comment">// compile error!</span></span><br></pre></td></tr></table></figure>

<p>常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。</p>
<p>常量的作用是用有意义的变量名来避免魔术数字（Magic number），例如，不要在代码中到处写<code>3.14</code>，而是定义一个常量。如果将来需要提高计算精度，我们只需要在常量的定义处修改，例如，改成<code>3.1416</code>，而不必在所有地方替换<code>3.14</code>。</p>
<p><strong>根据习惯，常量名通常全部大写。</strong></p>
<h3 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h3><p>在Java中，多行语句用{ }括起来。很多控制语句，例如条件判断和循环，都以{ }作为它们自身的范围，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (...) &#123; <span class="comment">// if开始</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (...) &#123; <span class="keyword">while</span> 开始</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (...) &#123; <span class="comment">// if开始</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="comment">// if结束</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="comment">// while结束</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// if结束</span></span><br></pre></td></tr></table></figure>

<p>只要正确地嵌套这些{ }，编译器就能识别出语句块的开始和结束。而在语句块中定义的变量，它有一个作用域，就是从定义处开始，到语句块结束。超出了作用域引用这些变量，编译器会报错。举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 变量i从这里开始定义</span></span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>; <span class="comment">// 变量x从这里开始定义</span></span><br><span class="line">        ...</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">            String s = <span class="string">&quot;LIEFox&quot;</span>; <span class="comment">// 变量s从这里开始定义</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="comment">// 变量s作用域到此结束</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 注意，这是一个新的变量s，它和上面的变量同名，</span></span><br><span class="line">        <span class="comment">// 但是因为作用域不同，它们是两个不同的变量:</span></span><br><span class="line">        String s = <span class="string">&quot;hi_LIEFox&quot;</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="comment">// 变量x和s作用域到此结束</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="comment">// 变量i作用域到此结束</span></span><br></pre></td></tr></table></figure>

<p>定义变量时，要遵循作用域最小化原则，尽量将变量定义在尽可能小的作用域，并且，不要重复使用变量名。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Java提供了两种变量类型：基本类型和引用类型</p>
<p>基本类型包括整型，浮点型，布尔型，字符型。</p>
<p>变量可重新赋值，等号是赋值语句，不是数学意义的等号。</p>
<p>常量在初始化后不可重新赋值，使用常量便于理解程序意图。</p>
<p>[TOC]</p>
<hr>
<h1 id="5）Java中的运算符"><a href="#5）Java中的运算符" class="headerlink" title="(5）Java中的运算符"></a>(5）Java中的运算符</h1><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><a href="https://imgchr.com/i/Dzq3Uf"><img src="https://s3.ax1x.com/2020/12/08/Dzq3Uf.png" alt="Dzq3Uf.png"></a></p>
<p>进行除法运算时，除数和被除数都为整数时，得到的结果也是整数，就算结果有小数位，也会忽略小数。例如：2510/1000=2,2.5。如果有小数参与，得到的结果也就是小数，不会忽略，例如：2.5/10=0.25。</p>
<p>在进行取模的时候，运算的结果取决于%左边的数的正负，如果为负数，结果就为负数，例如：（-5）%3=-2。而5%（-3）=2。</p>
<p>java中整数运算分为int类型的加减乘除，限于整数类型的长度，运算结果过大会出现数据溢出，导致得到的结果是一个奇怪的数，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2147483640</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = x + y;</span><br><span class="line">        System.out.println(sum); <span class="comment">// -2147483641</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们用二进制算法来计算这两个数，将他们转为二进制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  0111 1111 1111 1111 1111 1111 1111 1000</span><br><span class="line">+ 0000 0000 0000 0000 0000 0000 0000 1111</span><br><span class="line">-----------------------------------------</span><br><span class="line">  1000 0000 0000 0000 0000 0000 0000 0111</span><br></pre></td></tr></table></figure>

<p>因为第一位符号位为<strong>1</strong>，所以负数。</p>
<p>所以平常运算的时候要注意数据类型的长度，以免数据产生一个奇奇怪怪的数字。</p>
<p>重点说自增和自减</p>
<h4 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2</span></span><br><span class="line"><span class="keyword">int</span> b=<span class="number">3</span></span><br><span class="line"><span class="keyword">int</span> c=a+b++</span><br><span class="line"><span class="comment">//c=5,因为b++是先运算后自增，所以结果为5</span></span><br><span class="line"><span class="comment">//a=2</span></span><br><span class="line"><span class="comment">//b=4，因为已经运算，所以自增1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> c=a-++b;</span><br><span class="line"><span class="comment">//c=-2，b先自增后运算，所以b=4</span></span><br></pre></td></tr></table></figure>

<h4 id="自减"><a href="#自减" class="headerlink" title="自减"></a>自减</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> c=a-b--;</span><br><span class="line"><span class="comment">//c=-1，b先运算后自减，所以b=2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> c=a+--b;</span><br><span class="line"><span class="comment">//c=4，b先自减后运算，所以b=2</span></span><br></pre></td></tr></table></figure>

<p> 注意：自增和自减不可以运用到数字上，比如8++，–8就会报错。</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
<th>实例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>将该运算符左边的数值加上右边的数值， 其结果赋值给左边变量本身</td>
<td>int a=5; a+=2;</td>
<td>a=7</td>
</tr>
<tr>
<td>-=</td>
<td>将该运算符左边的数值减去右边的数值， 其结果赋值给左边变量本身</td>
<td>int a=5; a-=2;</td>
<td>a=3</td>
</tr>
<tr>
<td>*=</td>
<td>将该运算符左边的数值乘以右边的数值， 其结果赋值给左边变量本身</td>
<td>int a=5; a*=2;</td>
<td>a=10</td>
</tr>
<tr>
<td>/=</td>
<td>将该运算符左边的数值整除右边的数值， 其结果赋值给左边变量本身</td>
<td>int a=5; a/=2;</td>
<td>a=2</td>
</tr>
<tr>
<td>%=</td>
<td>将该运算符左边的数值除以右边的数值后取余，其结果赋值给左边变量本身</td>
<td>int a=5; a%=2;</td>
<td>a=1</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x, y, z; <span class="comment">// 定义3个整型的变量</span></span><br><span class="line">x = y = z = <span class="number">5</span>; <span class="comment">// 为变量赋初值为5</span></span><br><span class="line">x += <span class="number">10</span>; <span class="comment">// 等价于x=x+10，结果x=15</span></span><br><span class="line">y -= <span class="number">3</span>; <span class="comment">// 等价于y=y-3，结果y=2</span></span><br><span class="line">z *= <span class="number">5</span>; <span class="comment">// 等价于z=z*5，结果z=25</span></span><br><span class="line">x /= <span class="number">4</span>; <span class="comment">// 等价于x=x/4，结果x=1</span></span><br><span class="line">z %= x; <span class="comment">// 等价于z=z%x，结果z=0</span></span><br></pre></td></tr></table></figure>

<p>注意：赋值运算符可以自动实现强制类型转换</p>
<p>举个栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s=<span class="number">3</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">5</span></span><br><span class="line">s+=i</span><br><span class="line">sout(s)?<span class="comment">// System.out.println()→sout</span></span><br><span class="line"><span class="comment">//s=8</span></span><br></pre></td></tr></table></figure>

<p>虽然s和i相加会成为int类型，但java虚拟机会自动将类型装换成int，就可以省去强制类型装换i=（short）s。</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>关系运算符（relational operators）也可以称为“比较运算符”，用于用来比较判断两个变量或常量的大小。关系运算符是二元运算符，运算结果是 boolean 型。当运算符对应的关系成立时，运算结果是 true，否则是 false。</p>
<p>关系表达式是由关系运算符连接起来的表达式。关系运算符中“关系”二字的含义是指一个数据与另一个数据之间的关系，这种关系只有成立与不成立两种可能情况，可以用逻辑值来表示，逻辑上的 true 与 false 用数字 1 与 0 来表示。关系成立时表达式的结果为 true（或 1），否则表达式的结果为 false（或 0）。表 1 给出了比较运算符的含义及其实例应用。</p>
<p><a href="https://imgchr.com/i/rS1e7d"><img src="https://s3.ax1x.com/2020/12/08/rS1e7d.md.png" alt="rS1e7d.md.png"></a></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><a href="https://imgchr.com/i/rS1w90"><img src="https://s3.ax1x.com/2020/12/08/rS1w90.md.png" alt="rS1w90.md.png"></a></p>
<p>短路还是很形象的，区别：</p>
<ul>
<li>&amp;&amp; 与 &amp; 区别：如果 a 为 false，则不计算 b（因为不论 b 为何值，结果都为 false）</li>
<li>|| 与 | 区别：如果 a 为 true，则不计算 b（因为不论 b 为何值，结果都为 true）</li>
</ul>
<p>注意：短路与（&amp;&amp;）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。</p>
<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><p>运算符中“（）”优先级最高，“（）”可以控制你想最先运算的的优先级。不必硬记。</p>
<hr>
<p>[TOC]</p>
<h1 id="6-字符和字符串"><a href="#6-字符和字符串" class="headerlink" title="(6)字符和字符串"></a>(6)字符和字符串</h1><ul>
<li>char类型用’’括起来</li>
<li>String类型用””表示括起来</li>
</ul>
<p>举个栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">String s=<span class="string">&quot;LIEFox&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>常见的转义字符包括：</p>
<ul>
<li><code>\&quot;</code> 表示字符<code>&quot;</code></li>
<li><code>\&#39;</code> 表示字符<code>&#39;</code></li>
<li><code>\\</code> 表示字符<code>\</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;abc\&quot;xyz&quot;</span>; <span class="comment">// 包含7个字符: a, b, c, &quot;, x, y, z</span></span><br><span class="line">String s = <span class="string">&quot;abc\&#x27;xyz&quot;</span>; <span class="comment">// 包含7个字符: a, b, c, &#x27;, x, y, z</span></span><br><span class="line">String s = <span class="string">&quot;abc\\xyz&quot;</span>; <span class="comment">// 包含7个字符: a, b, c, \, x, y, z</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>\n</code> 表示换行符</li>
<li><code>\r</code> 表示回车符</li>
<li><code>\t</code> 表示Tab</li>
<li><code>\u####</code> 表示一个Unicode编码的字符</li>
</ul>
<h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>Java的编译器对字符串做了特殊照顾，可以使用<code>+</code>连接任意字符串和其他数据类型，这样极大地方便了字符串的处理。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        String s = s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">        System.out.println(s);<span class="comment">//Hello world!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果用<code>+</code>连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串，再连接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">25</span>;</span><br><span class="line">        String s = <span class="string">&quot;age is &quot;</span> + age;</span><br><span class="line">        System.out.println(s);<span class="comment">//age is 25</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意：String类型的值不可变！！！"><a href="#注意：String类型的值不可变！！！" class="headerlink" title="注意：String类型的值不可变！！！"></a>注意：String类型的值不可变！！！</h3><h3 id="空值null"><a href="#空值null" class="headerlink" title="空值null"></a>空值null</h3><p>引用类型的变量可以指向一个空值<code>null</code>，它表示不存在，即该变量不指向任何对象。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">null</span>; <span class="comment">// s1是null</span></span><br><span class="line">String s2; <span class="comment">// 没有赋初值值，s2也是null</span></span><br><span class="line">String s3 = s1; <span class="comment">// s3也是null</span></span><br><span class="line">String s4 = <span class="string">&quot;&quot;</span>; <span class="comment">// s4指向空字符串，不是null</span></span><br></pre></td></tr></table></figure>

<p>注意要区分空值<code>null</code>和空字符串<code>&quot;&quot;</code>，空字符串是一个有效的字符串对象，它不等于<code>null</code>。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Java的字符类型<code>char</code>是基本类型，字符串类型<code>String</code>是引用类型；</p>
<p>基本类型的变量是“持有”某个数值，引用类型的变量是“指向”某个对象；</p>
<p>引用类型的变量可以是空值<code>null</code>；</p>
<p>要区分空值<code>null</code>和空字符串<code>&quot;&quot;</code>。</p>
<hr>
<p>[TOC]</p>
<h1 id="7-数组类型"><a href="#7-数组类型" class="headerlink" title="(7)数组类型"></a>(7)数组类型</h1><p>如果我们有一组类型相同的变量，例如，5位同学的成绩，可以这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5位同学的成绩:</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">68</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">79</span>;</span><br><span class="line">        <span class="keyword">int</span> n3 = <span class="number">91</span>;</span><br><span class="line">        <span class="keyword">int</span> n4 = <span class="number">85</span>;</span><br><span class="line">        <span class="keyword">int</span> n5 = <span class="number">62</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但如果数据量大了，一个一个创建变量，会很不银型化。所以就有了数组这个神奇的东西。</p>
<p>我们可以优化成这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5位同学的成绩:</span></span><br><span class="line">       <span class="keyword">int</span>[] ns = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">       ns[<span class="number">0</span>] = <span class="number">68</span>;</span><br><span class="line">       ns[<span class="number">1</span>] = <span class="number">79</span>;</span><br><span class="line">       ns[<span class="number">2</span>] = <span class="number">91</span>;</span><br><span class="line">       ns[<span class="number">3</span>] = <span class="number">85</span>;</span><br><span class="line">       ns[<span class="number">4</span>] = <span class="number">62</span>;</span><br></pre></td></tr></table></figure>

<p>定义一个数组类型的变量，使用数组类型“类型[]”，例如，<code>int[]</code>。和单个基本类型变量不同，数组变量初始化必须使用<code>new int[5]</code>表示创建一个可容纳5个<code>int</code>元素的数组。</p>
<p>Java的数组有几个特点：</p>
<ul>
<li>数组所有元素初始化为默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code>；</li>
<li>数组一旦创建后，大小就不可改变。</li>
</ul>
<p>要访问数组中的某一个元素，需要使用索引。<strong>数组索引从<code>0</code>开始，例如，5个元素的数组，索引范围是<code>0</code>~`4`。</strong></p>
<p>可以修改数组中的某一个元素，使用赋值语句，例如，<code>ns[1] = 79;</code>。</p>
<p>可以用<code>数组变量.length</code>获取数组大小：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ns = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">System.out.println(ns.length); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<p>也可以在定义数组时直接指定初始化的元素，这样就不必写出数组大小，而是由编译器自动推算数组大小。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5位同学的成绩:</span></span><br><span class="line">        <span class="keyword">int</span>[] ns = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">68</span>, <span class="number">79</span>, <span class="number">91</span>, <span class="number">85</span>, <span class="number">62</span> &#125;;还可以简写：<span class="keyword">int</span>[] ns = &#123; <span class="number">68</span>, <span class="number">79</span>, <span class="number">91</span>, <span class="number">85</span>, <span class="number">62</span> &#125;;</span><br><span class="line">        System.out.println(ns.length); <span class="comment">// 编译器自动推算数组大小为5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意数组是引用类型，并且数组大小不可变。</strong></p>
<h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h3><p>如果数组元素不是基本类型，而是一个引用类型，那么，修改数组元素会有哪些不同？</p>
<p>字符串是引用类型，因此我们先定义一个字符串数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] names &#x3D; &#123;</span><br><span class="line">    &quot;ABC&quot;, &quot;XYZ&quot;, &quot;zoo&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对于<code>String[]</code>类型的数组变量<code>names</code>，它实际上包含3个元素，但每个元素都指向某个字符串对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          ┌─────────────────────────┐</span><br><span class="line">    names │   ┌─────────────────────┼───────────┐</span><br><span class="line">      │   │   │                     │           │</span><br><span class="line">      ▼   │   │                     ▼           ▼</span><br><span class="line">┌───┬───┬─┴─┬─┴─┬───┬───────┬───┬───────┬───┬───────┬───┐</span><br><span class="line">│   │░░░│░░░│░░░│   │ &quot;ABC&quot; │   │ &quot;XYZ&quot; │   │ &quot;zoo&quot; │   │</span><br><span class="line">└───┴─┬─┴───┴───┴───┴───────┴───┴───────┴───┴───────┴───┘</span><br><span class="line">      │                 ▲</span><br><span class="line">      └─────────────────┘</span><br></pre></td></tr></table></figure>

<p>对<code>names[1]</code>进行赋值，例如<code>names[1] = &quot;cat&quot;;</code>，效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          ┌─────────────────────────────────────────────────┐</span><br><span class="line">    names │   ┌─────────────────────────────────┐           │</span><br><span class="line">      │   │   │                                 │           │</span><br><span class="line">      ▼   │   │                                 ▼           ▼</span><br><span class="line">┌───┬───┬─┴─┬─┴─┬───┬───────┬───┬───────┬───┬───────┬───┬───────┬───┐</span><br><span class="line">│   │░░░│░░░│░░░│   │ &quot;ABC&quot; │   │ &quot;XYZ&quot; │   │ &quot;zoo&quot; │   │ &quot;cat&quot; │   │</span><br><span class="line">└───┴─┬─┴───┴───┴───┴───────┴───┴───────┴───┴───────┴───┴───────┴───┘</span><br><span class="line">      │                 ▲</span><br><span class="line">      └─────────────────┘</span><br></pre></td></tr></table></figure>

<p>这里注意到原来<code>names[1]</code>指向的字符串<code>&quot;XYZ&quot;</code>并没有改变，仅仅是将<code>names[1]</code>的引用从指向<code>&quot;XYZ&quot;</code>改成了指向<code>&quot;cat&quot;</code>，其结果是字符串<code>&quot;XYZ&quot;</code>再也无法通过<code>names[1]</code>访问到了。</p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>数组是同一数据类型的集合，数组一旦创建后，大小就不可变；</p>
<p>可以通过索引访问数组元素，但索引超出范围将报错；</p>
<p>数组元素可以是值类型（如int）或引用类型（如String），但数组本身是引用类型；</p>
<p>[TOC]</p>
<p>。。。。。。。。。</p>
<p><strong><em>作者：zjh</em></strong></p>
]]></content>
      <categories>
        <category>JAVA笔记</category>
      </categories>
      <tags>
        <tag>JAVA笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-ioc基于注解</title>
    <url>/posts/693b31a5.html</url>
    <content><![CDATA[<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a><strong>要求</strong></h1><p>使用Spring的IoC容器，实际上就是通过类似XML这样的配置文件，把我们自己的Bean的依赖关系描述出来，然后让容器来创建并装配Bean。一旦容器初始化完毕，我们就直接从容器中获取Bean使用它们。</p>
<p>使用XML配置的优点是所有的Bean都能一目了然地列出来，并通过配置注入能直观地看到每个Bean的依赖。它的缺点是写起来非常繁琐，每增加一个组件，就必须把新的Bean配置到XML中。</p>
<p>有没有其他更简单的配置方式呢？</p>
<p>有！我们可以使用Annotation配置，可以完全不需要XML，让Spring自动扫描Bean并组装它们。</p>
<h3 id="所以今天我们用注解来写一个基于注解的Spring"><a href="#所以今天我们用注解来写一个基于注解的Spring" class="headerlink" title="所以今天我们用注解来写一个基于注解的Spring"></a>所以今天我们用注解来写一个基于注解的Spring</h3><p><strong><a href="https://imgchr.com/i/D6E1Mj"><img src="https://s3.ax1x.com/2020/11/28/D6E1Mj.md.png" alt="D6E1Mj.md.png"></a></strong></p>
<hr>
<p><strong><a id="more"></a></strong></p>
<p><strong>由于是基于注解的IoC的Spring开发，所以我们要导入一个关键的jar包</strong></p>
<p><strong><a href="https://imgchr.com/i/D6Z7Pf"><img src="https://s3.ax1x.com/2020/11/28/D6Z7Pf.png" alt="D6Z7Pf.png"></a></strong></p>
<hr>
<h4 id="好啦，正题开始"><a href="#好啦，正题开始" class="headerlink" title="好啦，正题开始"></a><strong>好啦，正题开始</strong></h4><h1 id="第一步，万恶之源，打开我们的idea"><a href="#第一步，万恶之源，打开我们的idea" class="headerlink" title="第一步，万恶之源，打开我们的idea"></a><strong>第一步，万恶之源，打开我们的idea</strong></h1><ol>
<li><p><strong>创建一个java项目</strong></p>
</li>
<li><p><strong>在src里创建如下3个包</strong></p>
<p><strong><a href="https://imgchr.com/i/D6mV1S"><img src="https://s3.ax1x.com/2020/11/28/D6mV1S.png" alt="D6mV1S.png"></a></strong></p>
<ul>
<li><p><strong>Dao包（数据持久层）</strong></p>
</li>
<li><p><strong>Service包（业务逻辑层）</strong>    </p>
</li>
<li><p><strong>Web包（显示层）</strong></p>
</li>
</ul>
</li>
</ol>
<p><strong>3.接着在src下创建一个xml文件，名为（ApplicationContext.xml)</strong></p>
<p><strong><a href="https://imgchr.com/i/D6nngO"><img src="https://s3.ax1x.com/2020/11/28/D6nngO.md.png" alt="D6nngO.md.png"></a></strong></p>
<p><strong>src&gt;New&gt;XML File&gt;名为（ApplicationContext.xml)</strong></p>
<p><strong>4.xml文件里的代码如下</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;Service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;context:component-scan&gt;标签：指定扫描某一包下的注解</span></span><br><span class="line"><span class="comment">    base-package:指定需要扫描的包</span></span><br><span class="line"><span class="comment">    &lt;context:component-scan&gt;标签：指定扫描某一包下的注解</span></span><br><span class="line"><span class="comment">    base-package:指定需要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>5.接下来导jar包</strong></p>
<p><strong>Flie》Project Structure》Liberals》＋》Java》找到自己放spring jar包的地方》选中》OK》取个名字（Spring_Jars）》OK</strong></p>
<p><strong><a href="https://imgchr.com/i/D6u3yF"><img src="https://s3.ax1x.com/2020/11/28/D6u3yF.md.png" alt="D6u3yF.md.png"></a></strong></p>
<p><strong><a href="https://imgchr.com/i/D6Ku0H"><img src="https://s3.ax1x.com/2020/11/28/D6Ku0H.md.png" alt="D6Ku0H.md.png"></a></strong></p>
<p><strong>看一下加成功了没有</strong></p>
<p><strong><a href="https://imgchr.com/i/D6Mlb4"><img src="https://s3.ax1x.com/2020/11/28/D6Mlb4.png" alt="D6Mlb4.png"></a></strong></p>
<p><strong>好的，有Spring_Jars包了</strong></p>
<p><strong>到这一步，咱们就算上车了，开始飙车了</strong></p>
<hr>
<h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h1><p><strong>安照题目要求</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dao层：接口文件StudentDao，包含方法selectAll</span><br><span class="line">        实现类StudentDaoImpl,包含selectAll方法的实现（仅写输出语句表示方法调用成功即可）</span><br><span class="line">Service层：接口文件StudentService，包含方法selectAll</span><br><span class="line">            实现类StudentServiceImpl,包含selectAll方法的实现、属性SName(String)、属性SId(String)</span><br><span class="line">Web层:类WebMain,主方法中调用Service层的selectAll方法。</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>在Dao包里新建一个接口文件StudentDao</strong></p>
</li>
<li><p><strong>在Dao包里新建一个java文件StudentDaoImpl</strong></p>
</li>
<li><p><strong>Service。。。</strong></p>
</li>
<li><p><strong>Web。。。</strong></p>
</li>
<li><p><strong>以下面这个结构来建，咱们把框架给搭起来，就快了！！</strong></p>
<p><strong><a href="https://imgchr.com/i/D6QlSP"><img src="https://s3.ax1x.com/2020/11/28/D6QlSP.png" alt="D6QlSP.png"></a></strong></p>
<hr>
</li>
</ol>
<h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h1><p><strong>骨架欧克了，我们现在去丰满他的细节</strong></p>
<p><strong>1.</strong></p>
<p><strong>Dao》StudentDao</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Dao》StudentDaoImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">StudentDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询所有学生信息！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.</strong></p>
<p><strong>Service》StudentService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Service》StudentServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果报错的话，记得导包</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="comment">//如果idea自动导的话就没事</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(value = &quot;StudentService&quot;)</span><span class="comment">//@Repository:用于持久层的注解，作用与Component相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*实现类StudentServiceImpl,包含selectAll方法的实现、属性SName(String)、属性SId(String)*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;LIEFox&quot;)</span><span class="comment">//与&lt;property&gt;标签作用一样</span></span><br><span class="line">    <span class="keyword">private</span> String SName;</span><br><span class="line">    <span class="meta">@Value(&quot;https:cxq21.gitee.io&quot;)</span><span class="comment">//偷偷的打个广告嘿嘿</span></span><br><span class="line">    <span class="keyword">private</span> String SId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询到了一个名为&quot;</span>+SName+<span class="string">&quot;网站,网址为&quot;</span>+SId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.</strong></p>
<p><strong>Web》WebMain</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果报错的话，记得导包</span></span><br><span class="line"><span class="keyword">import</span> Service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="comment">//如果idea自动导的话就没事</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Web层:类WebMain,主方法中调用Service层的selectAll方法。</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.容器初始化</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建实例</span></span><br><span class="line">        StudentService service=(StudentService) context.getBean(<span class="string">&quot;StudentService&quot;</span>);</span><br><span class="line">        service.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这样，我们的一个基于注解的Spring项目是写完了。</strong></p>
<hr>
<h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h1><p><strong>运行项目。。。</strong></p>
<p><strong>结果出来了</strong></p>
<p><strong><a href="https://imgchr.com/i/D68G3n"><img src="https://s3.ax1x.com/2020/11/28/D68G3n.md.png" alt="D68G3n.md.png"></a></strong></p>
<hr>
<h2 id="原项目"><a href="#原项目" class="headerlink" title="原项目"></a>原项目</h2><p><strong>最后，附上，我的gitee原项目，地址：<a href="https://gitee.com/cxq21/spring_-ioc">https://gitee.com/cxq21/spring_-ioc</a></strong></p>
<p><strong>下载zip，然后解压就欧克了</strong></p>
<p><strong><a href="https://imgchr.com/i/D6Gfs0"><img src="https://s3.ax1x.com/2020/11/28/D6Gfs0.md.png" alt="D6Gfs0.md.png"></a></strong></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h1><p><strong>使用Annotation可以大幅简化配置，每个Bean通过<code>@Component</code>和<code>@Autowired</code>注入；</strong></p>
<p><strong>必须合理设计包的层次结构，才能发挥<code>@ComponentScan</code>的威力。</strong></p>
<p><strong><em>作者：zjh</em></strong></p>
<h2 id="码字不易，留下你的评论吧"><a href="#码字不易，留下你的评论吧" class="headerlink" title="码字不易，留下你的评论吧"></a>码字不易，留下你的评论吧</h2>]]></content>
      <categories>
        <category>JAVA案例</category>
      </categories>
      <tags>
        <tag>案例记录</tag>
      </tags>
  </entry>
  <entry>
    <title>友链使用</title>
    <url>/posts/57d1587b.html</url>
    <content><![CDATA[<h1 id="友链使用"><a href="#友链使用" class="headerlink" title="友链使用"></a>友链使用</h1><p><a href="https://imgchr.com/i/DrR4iR"><img src="https://s3.ax1x.com/2020/11/27/DrR4iR.png" alt="DrR4iR.png"></a></p>
<h3 id="友情链接里面有七款实用工具，许多作为我们程序员都可以玩的6起，接下来，我将会和大家解释这几款实用工具！！！"><a href="#友情链接里面有七款实用工具，许多作为我们程序员都可以玩的6起，接下来，我将会和大家解释这几款实用工具！！！" class="headerlink" title="友情链接里面有七款实用工具，许多作为我们程序员都可以玩的6起，接下来，我将会和大家解释这几款实用工具！！！"></a>友情链接里面有七款实用工具，许多作为我们程序员都可以玩的6起，接下来，我将会和大家解释这几款实用工具！！！</h3><hr>
<a id="more"></a>

<h1 id="时光邮局："><a href="#时光邮局：" class="headerlink" title="时光邮局："></a>时光邮局：</h1><p>​        点进去，撰写信件，然后绑定一个自己的邮箱，然后在未来的某一时间寄给自己或某人！！！</p>
<p><a href="https://imgchr.com/i/Dr4FeO"><img src="https://s3.ax1x.com/2020/11/27/Dr4FeO.png" alt="Dr4FeO.png"></a></p>
<h2 id="为什么要给未来写信？"><a href="#为什么要给未来写信？" class="headerlink" title="为什么要给未来写信？"></a>为什么要给未来写信？</h2><p>​                从过去获得惊喜，<br>​                给你的未来一些灵感或安慰的话，<br>​                或者预测一下你的生活，这个世界，你的家人。<br>​                以及一年，五年会发生什么。</p>
<h2 id="可以给任何人写信么？"><a href="#可以给任何人写信么？" class="headerlink" title="可以给任何人写信么？"></a>可以给任何人写信么？</h2><p>​                为了防止骚扰，营销邮件，<br>​                每次写信后都会往收件箱发一封验证邮件<br>​                点击了验证邮件，未来才会收到写的信<br>​                后续官网应该会开放更多功能哦</p>
<hr>
<h1 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h1><p><strong>码云</strong>：代码托管·协作开发平台，开发者超过 500 万，托管项目超过 1000 万，汇聚几乎所有本土原创开源项目，并于 2016 年推出企业版，提供企业级代码托管服务，成为开发领域领先的 SaaS 服务提供商。</p>
<p>此码云并非彼马云，这个名字或许是蹭了某爸的热度。。但在这里，除了Github，GItee就是国内最好的代码托管了。毕竟</p>
<p>鄙人的第一个静态网页就是在我师傅的教导，在gitee上搭建的。</p>
<p>后期：我将会出一门git教程。教大家如何使用，并利用git来搭建自己的静态网页。</p>
<hr>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p><a href="https://imgchr.com/i/Dr5WCj"><img src="https://s3.ax1x.com/2020/11/27/Dr5WCj.png" alt="Dr5WCj.png"></a></p>
<p>本网站就基于hexo框架及arey框架搭建。。</p>
<p>感谢，感谢，感谢。</p>
<p><strong>大家想去搭属于自己的网站的话</strong>，可以联系我们<strong>拾柒工作室</strong>，我们将<strong>有偿搭建</strong>（<strong>价格私聊</strong>）：</p>
<table>
<thead>
<tr>
<th align="center">邮箱</th>
<th align="center"><a href="mailto:&#50;&#x36;&#x30;&#54;&#48;&#57;&#55;&#50;&#49;&#56;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#50;&#x36;&#x30;&#54;&#48;&#57;&#55;&#50;&#49;&#56;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>电话</strong></td>
<td align="center">15270055490</td>
</tr>
<tr>
<td align="center"><strong>工作室地址</strong></td>
<td align="center">江信学院教学楼（606）</td>
</tr>
<tr>
<td align="center"><strong>QQ</strong></td>
<td align="center">2606097218</td>
</tr>
</tbody></table>
<h1 id="高清壁纸"><a href="#高清壁纸" class="headerlink" title="高清壁纸"></a>高清壁纸</h1><p><a href="https://imgchr.com/i/DrTFgA"><img src="https://s3.ax1x.com/2020/11/27/DrTFgA.png" alt="DrTFgA.png"></a></p>
<p>该工具是真的强悍；电脑壁纸多，精，美。最主要是有4k呀！</p>
<hr>
<h1 id="爱奇艺vip视频解析"><a href="#爱奇艺vip视频解析" class="headerlink" title="爱奇艺vip视频解析"></a>爱奇艺vip视频解析</h1><p>点击链接，将会看到一个地址栏，他要你填写一串链接，不要慌，我来教你，如何去嫖免费爱奇艺视频</p>
<p><a href="https://imgchr.com/i/DrTHVf"><img src="https://s3.ax1x.com/2020/11/27/DrTHVf.png" alt="DrTHVf.png"></a></p>
<ul>
<li><h3 id="同时打开爱奇艺在线视频网站"><a href="#同时打开爱奇艺在线视频网站" class="headerlink" title="同时打开爱奇艺在线视频网站"></a>同时打开爱奇艺在线视频网站</h3></li>
</ul>
<p><a href="https://imgchr.com/i/Dr7MdK"><img src="https://s3.ax1x.com/2020/11/27/Dr7MdK.png" alt="Dr7MdK.png"></a></p>
<ul>
<li><h3 id="选择任意一个VIP电影，比如姜子牙，需要收费"><a href="#选择任意一个VIP电影，比如姜子牙，需要收费" class="headerlink" title="选择任意一个VIP电影，比如姜子牙，需要收费"></a>选择任意一个VIP电影，比如姜子牙，需要收费</h3></li>
</ul>
<p><a href="https://imgchr.com/i/Dr7NLt"><img src="https://s3.ax1x.com/2020/11/27/Dr7NLt.png" alt="Dr7NLt.png"></a></p>
<ul>
<li><h3 id="复制地址栏的爱奇艺视频链接"><a href="#复制地址栏的爱奇艺视频链接" class="headerlink" title="复制地址栏的爱奇艺视频链接"></a>复制地址栏的爱奇艺视频链接</h3><p><a href="https://imgchr.com/i/DrHb9g"><img src="https://s3.ax1x.com/2020/11/27/DrHb9g.png" alt="DrHb9g.png"></a></p>
</li>
<li><h3 id="返回刚刚的视频解析工具，将链接复制进去，稍等一下就可以播放了"><a href="#返回刚刚的视频解析工具，将链接复制进去，稍等一下就可以播放了" class="headerlink" title="返回刚刚的视频解析工具，将链接复制进去，稍等一下就可以播放了"></a>返回刚刚的视频解析工具，将链接复制进去，稍等一下就可以播放了</h3></li>
</ul>
<p><a href="https://imgchr.com/i/DrbQ8e"><img src="https://s3.ax1x.com/2020/11/27/DrbQ8e.png" alt="DrbQ8e.png"></a></p>
<hr>
<h1 id="糗事百科"><a href="#糗事百科" class="headerlink" title="糗事百科"></a>糗事百科</h1><p>点击进去</p>
<p><a href="https://imgchr.com/i/DrbGDI"><img src="https://s3.ax1x.com/2020/11/27/DrbGDI.png" alt="DrbGDI.png"></a></p>
<p>学习了一天，应该逛逛糗事@@@</p>
<hr>
<h1 id="阿里矢量ico"><a href="#阿里矢量ico" class="headerlink" title="阿里矢量ico"></a>阿里矢量ico</h1><p><a href="https://imgchr.com/i/Drbh24"><img src="https://s3.ax1x.com/2020/11/27/Drbh24.png" alt="Drbh24.png"></a></p>
<p>阿里妈妈MUX倾力打造的矢量图标管理、交流平台。</p>
<h4 id="设计师将图标上传到Iconfont平台，用户可以自定义下载多种格式的icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。"><a href="#设计师将图标上传到Iconfont平台，用户可以自定义下载多种格式的icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。" class="headerlink" title="设计师将图标上传到Iconfont平台，用户可以自定义下载多种格式的icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。"></a>设计师将图标上传到Iconfont平台，用户可以自定义下载多种格式的icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。</h4><hr>
<h4 id="后期将接着添加好玩切有趣的网站供大家使用，收藏网址不迷路》https-cxq21-gitee-io"><a href="#后期将接着添加好玩切有趣的网站供大家使用，收藏网址不迷路》https-cxq21-gitee-io" class="headerlink" title="后期将接着添加好玩切有趣的网站供大家使用，收藏网址不迷路》https://cxq21.gitee.io/"></a>后期将接着添加好玩切有趣的网站供大家使用，收藏网址不迷路》<a href="https://cxq21.gitee.io/">https://cxq21.gitee.io/</a></h4><p>​                                                                                                                                                                                                                <em>作者：zjh</em>    </p>
]]></content>
      <categories>
        <category>说明文档</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>江信19级软件测试刷题系统</title>
    <url>/posts/1e3f2157.html</url>
    <content><![CDATA[<h1 id="江信19级软件测试刷题系统"><a href="#江信19级软件测试刷题系统" class="headerlink" title="江信19级软件测试刷题系统"></a>江信19级软件测试刷题系统</h1><hr>
<h1 id="上一个刷题系统已经关闭，微信群里将提供永久刷题系统，请同学们扫码进群。"><a href="#上一个刷题系统已经关闭，微信群里将提供永久刷题系统，请同学们扫码进群。" class="headerlink" title="上一个刷题系统已经关闭，微信群里将提供永久刷题系统，请同学们扫码进群。"></a>上一个刷题系统已经关闭，微信群里将提供永久刷题系统，请同学们扫码进群。</h1><h1 id="这个系统手机电脑都可刷。有任何疑问请在微信群或评论区质询！"><a href="#这个系统手机电脑都可刷。有任何疑问请在微信群或评论区质询！" class="headerlink" title="这个系统手机电脑都可刷。有任何疑问请在微信群或评论区质询！"></a>这个系统手机电脑都可刷。有任何疑问请在<strong>微信群或评论区</strong>质询！</h1><p><a href="https://imgchr.com/i/rMyKOO"><img src="https://s3.ax1x.com/2020/12/15/rMyKOO.png" alt="rMyKOO.png" style="zoom:50%;" /></a></p>
<h3 id="致敬题库制作人员：-佐佳豪、李玮峰"><a href="#致敬题库制作人员：-佐佳豪、李玮峰" class="headerlink" title="致敬题库制作人员： 佐佳豪、李玮峰"></a>致敬题库制作人员： 佐佳豪、李玮峰</h3><p><em>作者：zjh</em></p>
]]></content>
      <categories>
        <category>江信1+X</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>网站来源灵感</title>
    <url>/posts/6b5b190a.html</url>
    <content><![CDATA[<p>欢迎来到<a href="https://cxq21.gitee.io/">LIEFox</a>! 这是我们的官方网站.这是我们第一篇文章！！！</p>
<h1 id="网站来源灵感"><a href="#网站来源灵感" class="headerlink" title="网站来源灵感"></a>网站来源灵感</h1><p>为什么要搭建出这个网站，原因是发现许多同学在课后作业不会做时，迷茫不知去和处寻找。目前百度可以搜到的也只有CSDN里面里的代码。但CSDN里的代码少数可以为我们所用，对许多初学者并不友好，所以，我发现这个问题，一开始将项目放在Gitee上<a href="https://gitee.com/cxq21">我的项目</a>,发现许多同学并不会正确使用。导致项目并不可以正常运行。<strong>因此，</strong>我就找到了我的室友（前端攻城狮：万津津）、（UI射击狮：李玮峰）联手搭建了这个网站！！！<a id="more"></a></p>
<h1 id="站名之源"><a href="#站名之源" class="headerlink" title="站名之源"></a>站名之源</h1><p><a href="https://cxq21.gitee.io/">LIEFox</a>，LIE：谎言；Fox:狐狸。！！！没错！！！组合起来是“谎言之狐”。希望网站可以使用户思维像西伯利亚的雪狐一样，在代码中寻找自己需要的猎物（代码），并做到（谎）花草丛中过，片叶不沾身。</p>
<h1 id="LOGO灵感"><a href="#LOGO灵感" class="headerlink" title="LOGO灵感"></a>LOGO灵感</h1><p><a href="https://imgchr.com/i/DDAP1I"><img src="https://s3.ax1x.com/2020/11/27/DDAP1I.png" alt="DDAP1I.png"></a></p>
<p>应景了站名LIEFox，可爱logo是折纸风格的狐狸与站名相结合，liefox采取了狐狸身上的几个主要颜色。</p>
<p>为什么选狐狸呢？肯定是狐狸可爱呀哈哈哈，像这样的</p>
<p><a href="https://imgchr.com/i/DDAeAg"><img src="https://s3.ax1x.com/2020/11/27/DDAeAg.md.jpg" alt="DDAeAg.md.jpg"></a></p>
<p>这样的</p>
<p><a href="https://imgchr.com/i/DDAIDf"><img src="https://s3.ax1x.com/2020/11/27/DDAIDf.jpg" alt="DDAIDf.jpg"></a></p>
<p>这样的</p>
<p><a href="https://imgchr.com/i/DDA5KP"><img src="https://s3.ax1x.com/2020/11/27/DDA5KP.jpg" alt="DDA5KP.jpg"></a></p>
<p>这样的</p>
<p><a href="https://imgchr.com/i/DDAhvt"><img src="https://s3.ax1x.com/2020/11/27/DDAhvt.jpg" alt="DDAhvt.jpg"></a></p>
<p>爱了爱了爱了</p>
<h2 id="不出意外的话过些天将是我们LIEFox的吉祥物。"><a href="#不出意外的话过些天将是我们LIEFox的吉祥物。" class="headerlink" title="不出意外的话过些天将是我们LIEFox的吉祥物。"></a>不出意外的话过些天将是我们LIEFox的吉祥物。</h2><p>​                                                                                                                                                                                                                <em>作者：zjh</em>    </p>
]]></content>
      <categories>
        <category>关于本站</category>
      </categories>
      <tags>
        <tag>网站来源</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA简介</title>
    <url>/posts/98ac5948.html</url>
    <content><![CDATA[<h1 id="（1）JAVA简介"><a href="#（1）JAVA简介" class="headerlink" title="（1）JAVA简介"></a>（1）JAVA简介</h1><p>Java最早是由SUN公司（已被Oracle收购）的<a href="https://en.wikipedia.org/wiki/James_Gosling">詹姆斯·高斯林</a>（高斯林，人称Java之父）在上个世纪90年代初开发的一种编程语言，最初被命名为Oak，目标是针对小型家电设备的嵌入式应用，结果市场没啥反响。谁料到互联网的崛起，让Oak重新焕发了生机，于是SUN公司改造了Oak，在1995年以Java的名称正式发布，原因是Oak已经被人注册了，因此SUN注册了Java这个商标。随着互联网的高速发展，Java逐渐成为最重要的网络编程语言。</p>
<p>Java介于编译型语言和解释型语言之间。编译型语言如C、C++，代码是直接编译成机器码执行，但是不同的平台（x86、ARM等）CPU的指令集不同，因此，需要编译出每一种平台的对应机器码。解释型语言如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价是运行效率太低。而Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果。当然，这是针对Java开发者而言。对于虚拟机，需要为每个平台分别开发。为了保证不同平台、不同公司开发的虚拟机都能正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。从实践的角度看，JVM的兼容性做得非常好，低版本的Java字节码完全可以正常运行在高版本的JVM上。</p>
<p>随着Java的发展，SUN给Java又分出了三个不同版本：</p>
<ul>
<li>Java SE：Standard Edition</li>
<li>Java EE：Enterprise Edition</li>
<li>Java ME：Micro Edition</li>
</ul>
<p>这三者之间有啥关系呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│Java EE                    │</span><br><span class="line">│    ┌────────────────────┐ │</span><br><span class="line">│    │Java SE             │ │</span><br><span class="line">│    │    ┌─────────────┐ │ │</span><br><span class="line">│    │    │   Java ME   │ │ │</span><br><span class="line">│    │    └─────────────┘ │ │</span><br><span class="line">│    └────────────────────┘ │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>简单来说，Java SE就是标准版，包含标准的JVM和标准库，而Java EE是企业版，它只是在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。</p>
<p>Java ME就和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。</p>
<p>毫无疑问，Java SE是整个Java平台的核心，而Java EE是进一步学习Web应用所必须的。我们熟悉的Spring等框架都是Java EE开源生态系统的一部分。不幸的是，Java ME从来没有真正流行起来，反而是Android开发成为了移动平台的标准之一，因此，没有特殊需求，不建议学习Java ME。</p>
<p>因此我们推荐的Java学习路线图如下：</p>
<ol>
<li>首先要学习Java SE，掌握Java语言本身、Java核心开发技术以及Java标准库的使用；</li>
<li>如果继续学习Java EE，那么Spring框架、数据库开发、分布式架构就是需要学习的；</li>
<li>如果要学习大数据开发，那么Hadoop、Spark、Flink这些大数据平台就是需要学习的，他们都基于Java或Scala开发；</li>
<li>如果想要学习移动开发，那么就深入Android平台，掌握Android App开发。</li>
</ol>
<p>无论怎么选择，Java SE的核心技术是基础，这个教程的目的就是让你完全精通Java SE！</p>
<h3 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h3><p>从1995年发布1.0版本开始，到目前为止，最新的Java版本是Java 15：</p>
<table>
<thead>
<tr>
<th align="left">时间</th>
<th align="left">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1995</td>
<td align="left">1.0</td>
</tr>
<tr>
<td align="left">1998</td>
<td align="left">1.2</td>
</tr>
<tr>
<td align="left">2000</td>
<td align="left">1.3</td>
</tr>
<tr>
<td align="left">2002</td>
<td align="left">1.4</td>
</tr>
<tr>
<td align="left">2004</td>
<td align="left">1.5 / 5.0</td>
</tr>
<tr>
<td align="left">2005</td>
<td align="left">1.6 / 6.0</td>
</tr>
<tr>
<td align="left">2011</td>
<td align="left">1.7 / 7.0</td>
</tr>
<tr>
<td align="left">2014</td>
<td align="left">1.8 / 8.0</td>
</tr>
<tr>
<td align="left">2017/9</td>
<td align="left">1.9 / 9.0</td>
</tr>
<tr>
<td align="left">2018/3</td>
<td align="left">10</td>
</tr>
<tr>
<td align="left">2018/9</td>
<td align="left">11</td>
</tr>
<tr>
<td align="left">2019/3</td>
<td align="left">12</td>
</tr>
<tr>
<td align="left">2019/9</td>
<td align="left">13</td>
</tr>
<tr>
<td align="left">2020/3</td>
<td align="left">14</td>
</tr>
<tr>
<td align="left">2020/9</td>
<td align="left">15</td>
</tr>
</tbody></table>
<p>本教程使用的Java版本是最新版的<strong>Java 8</strong>。</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>初学者学Java，经常听到JDK、JRE这些名词，它们到底是啥？</p>
<ul>
<li>JDK：Java Development Kit</li>
<li>JRE：Java Runtime Environment</li>
</ul>
<p>简单地说，JRE就是运行Java字节码的虚拟机。但是，如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。</p>
<p>二者关系如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ┌─    ┌──────────────────────────────────┐</span><br><span class="line"> │     │     Compiler, debugger, etc.     │</span><br><span class="line"> │     └──────────────────────────────────┘</span><br><span class="line">JDK ┌─ ┌──────────────────────────────────┐</span><br><span class="line"> │  │  │                                  │</span><br><span class="line"> │ JRE │      JVM + Runtime Library       │</span><br><span class="line"> │  │  │                                  │</span><br><span class="line"> └─ └─ └──────────────────────────────────┘</span><br><span class="line">       ┌───────┐┌───────┐┌───────┐┌───────┐</span><br><span class="line">       │Windows││ Linux ││ macOS ││others │</span><br><span class="line">       └───────┘└───────┘└───────┘└───────┘</span><br></pre></td></tr></table></figure>

<p>要学习Java开发，当然需要安装JDK了。</p>
<p>那JSR、JCP……又是啥？</p>
<ul>
<li>JSR规范：Java Specification Request</li>
<li>JCP组织：Java Community Process</li>
</ul>
<p>为了保证Java语言的规范性，SUN公司搞了一个JSR规范，凡是想给Java平台加一个功能，比如说访问数据库的功能，大家要先创建一个JSR规范，定义好接口，这样，各个数据库厂商都按照规范写出Java驱动程序，开发者就不用担心自己写的数据库代码在MySQL上能跑，却不能跑在PostgreSQL上。</p>
<p>所以JSR是一系列的规范，从JVM的内存模型到Web程序接口，全部都标准化了。而负责审核JSR的组织就是JCP。</p>
<p>一个JSR规范发布时，为了让大家有个参考，还要同时发布一个“参考实现”，以及一个“兼容性测试套件”：</p>
<ul>
<li>RI：Reference Implementation</li>
<li>TCK：Technology Compatibility Kit</li>
</ul>
<p>比如有人提议要搞一个基于Java开发的消息服务器，这个提议很好啊，但是光有提议还不行，得贴出真正能跑的代码，这就是RI。如果有其他人也想开发这样一个消息服务器，如何保证这些消息服务器对开发者来说接口、功能都是相同的？所以还得提供TCK。</p>
<p>通常来说，RI只是一个“能跑”的正确的代码，它不追求速度，所以，如果真正要选择一个Java的消息服务器，一般是没人用RI的，大家都会选择一个有竞争力的商用或开源产品。</p>
<hr>
<p>[TOC]</p>
<h1 id="（2）安装JDK"><a href="#（2）安装JDK" class="headerlink" title="（2）安装JDK"></a>（2）安装JDK</h1><p>因为Java程序必须运行在JVM之上，所以，我们第一件事情就是安装JDK。</p>
<p>搜索JDK 15，确保从<a href="https://www.oracle.com/java/technologies/javase-downloads.html">Oracle的官网</a>下载最新的稳定版JDK：</p>
<p><a href="https://imgchr.com/i/DjuG4g"><img src="https://s3.ax1x.com/2020/12/06/DjuG4g.md.png" alt="DjuG4g.md.png"></a></p>
<p>找到Java SE 8的下载链接，下载安装即可。</p>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>安装完JDK后，需要设置一个<code>JAVA_HOME</code>的环境变量，它指向JDK的安装目录。在Windows下，它是安装目录，类似：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Java\jdk-8</span><br></pre></td></tr></table></figure>

<p>在Mac下，它在<code>~/.bash_profile</code>或<code>~/.zprofile</code>里，它是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#96;&#x2F;usr&#x2F;libexec&#x2F;java_home -v 8&#96;</span><br></pre></td></tr></table></figure>

<p>然后，把<code>JAVA_HOME</code>的<code>bin</code>目录附加到系统环境变量<code>PATH</code>上。在Windows下，它长这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Path&#x3D;%JAVA_HOME%\bin;&lt;现有的其他路径&gt;</span><br></pre></td></tr></table></figure>

<p>在Mac下，它在<code>~/.bash_profile</code>或<code>~/.zprofile</code>里，长这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

<p>把<code>JAVA_HOME</code>的<code>bin</code>目录添加到<code>PATH</code>中是为了在任意文件夹下都可以运行<code>java</code>。打开命令提示符窗口，输入命令<code>java -version</code>，如果一切正常，你会看到如下输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; java -version                                      │</span><br><span class="line">│java version &quot;8&quot; ...                                   │</span><br><span class="line">│Java(TM) SE Runtime Environment                         │</span><br><span class="line">│Java HotSpot(TM) 64-Bit Server VM                       │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt;                                                    │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>如果你看到的版本号不是<code>8</code>，而是<code>14</code>、<code>1.4</code>之类，说明系统存在多个JDK，且默认JDK不是JDK 15，需要把JDK 8提到<code>PATH</code>前面。</p>
<p>如果你得到一个错误输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [Version 10.0.0]                      │</span><br><span class="line">│(c) 2015 Microsoft Corporation. All rights reserved.    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt; java -version                                      │</span><br><span class="line">│&#39;java&#39; is not recognized as an internal or external comm│</span><br><span class="line">│and, operable program or batch file.                    │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\&gt;                                                    │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>这是因为系统无法找到Java虚拟机的程序<code>java.exe</code>，需要检查JAVA_HOME和PATH的配置。</p>
<p>可以参考<a href="https://www.java.com/zh_CN/download/help/path.xml">如何设置或更改PATH系统变量</a>。</p>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>细心的童鞋还可以在<code>JAVA_HOME</code>的<code>bin</code>目录下找到很多可执行文件：</p>
<ul>
<li><p>java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码；</p>
</li>
<li><p>javac：这是Java的编译器，它用于把Java源码文件（以<code>.java</code>后缀结尾）编译为Java字节码文件（以<code>.class</code>后缀结尾）；</p>
</li>
<li><p>jar：用于把一组<code>.class</code>文件打包成一个<code>.jar</code>文件，便于发布；</p>
</li>
<li><p>javadoc：用于从Java源码中自动提取注释并生成文档；</p>
</li>
<li><p>jdb：Java调试器，用于开发阶段的运行调试。</p>
<hr>
<p>[TOC]</p>
</li>
</ul>
<h1 id="（3）第一个Java程序"><a href="#（3）第一个Java程序" class="headerlink" title="（3）第一个Java程序"></a>（3）第一个Java程序</h1><p>我们来编写第一个Java程序。</p>
<p>打开文本编辑器，输入以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, LIEFox!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一个Java程序中，你总能找到一个类似：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>的定义，这个定义被称为class（类），这里的类名是<code>Hello</code>，大小写敏感，<code>class</code>用来定义一个类，<code>public</code>表示这个类是公开的，<code>public</code>、<code>class</code>都是Java的关键字，必须小写，<code>Hello</code>是类的名字，按照习惯，首字母<code>H</code>要大写。而花括号<code>&#123;&#125;</code>中间则是类的定义。</p>
<p>注意到类的定义中，我们定义了一个名为<code>main</code>的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法是可执行的代码块，一个方法除了方法名<code>main</code>，还有用<code>()</code>括起来的方法参数，这里的<code>main</code>方法有一个参数，参数类型是<code>String[]</code>，参数名是<code>args</code>，<code>public</code>、<code>static</code>用来修饰方法，这里表示它是一个公开的静态方法，<code>void</code>是方法的返回类型，而花括号<code>&#123;&#125;</code>中间的就是方法的代码。</p>
<p>方法的代码每一行用<code>;</code>结束，这里只有一行代码，就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello, LIEFox!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>它用来打印一个字符串到屏幕上。</p>
<p>Java规定，某个类定义的<code>public static void main(String[] args)</code>是Java程序的固定入口方法，因此，Java程序总是从<code>main</code>方法开始执行。</p>
<p>注意到Java源码的缩进不是必须的，但是用缩进后，格式好看，很容易看出代码块的开始和结束，缩进一般是4个空格或者一个tab。</p>
<p>最后，当我们把代码保存为文件时，文件名必须是<code>Hello.java</code>，而且文件名也要注意大小写，因为要和我们定义的类名<code>Hello</code>完全保持一致。</p>
<h3 id="如何运行Java程序"><a href="#如何运行Java程序" class="headerlink" title="如何运行Java程序"></a>如何运行Java程序</h3><p>Java源码本质上是一个文本文件，我们需要先用<code>javac</code>把<code>Hello.java</code>编译成字节码文件<code>Hello.class</code>，然后，用<code>java</code>命令执行这个字节码文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌──────────────────┐</span><br><span class="line">│    Hello.java    │&lt;─── source code</span><br><span class="line">└──────────────────┘</span><br><span class="line">          │ compile</span><br><span class="line">          ▼</span><br><span class="line">┌──────────────────┐</span><br><span class="line">│   Hello.class    │&lt;─── byte code</span><br><span class="line">└──────────────────┘</span><br><span class="line">          │ execute</span><br><span class="line">          ▼</span><br><span class="line">┌──────────────────┐</span><br><span class="line">│    Run on JVM    │</span><br><span class="line">└──────────────────┘</span><br></pre></td></tr></table></figure>

<p>因此，可执行文件<code>javac</code>是编译器，而可执行文件<code>java</code>就是虚拟机。</p>
<p>第一步，在保存<code>Hello.java</code>的目录下执行命令<code>javac Hello.java</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ javac Hello.java</span><br></pre></td></tr></table></figure>

<p>如果源代码无误，上述命令不会有任何输出，而当前目录下会产生一个<code>Hello.class</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Hello.class	Hello.java</span><br></pre></td></tr></table></figure>

<p>第二步，执行<code>Hello.class</code>，使用命令<code>java Hello</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java Hello</span><br><span class="line">Hello, LIEFox!</span><br></pre></td></tr></table></figure>

<p>注意：给虚拟机传递的参数<code>Hello</code>是我们定义的类名，虚拟机自动查找对应的class文件并执行。</p>
<p>有一些童鞋可能知道，直接运行<code>java Hello.java</code>也是可以的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java Hello.java </span><br><span class="line">Hello, LIEFox!</span><br></pre></td></tr></table></figure>

<p>这是Java 11新增的一个功能，它可以直接运行一个单文件源码！</p>
<p>需要注意的是，在实际项目中，单个不依赖第三方库的Java源码是非常罕见的，所以，绝大多数情况下，我们无法直接运行一个Java源码文件，原因是它需要依赖其他的库。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>一个Java源码只能定义一个<code>public</code>类型的class，并且class名称和文件名要完全一致；</p>
<p>使用<code>javac</code>可以将<code>.java</code>源码编译成<code>.class</code>字节码；</p>
<p>使用<code>java</code>可以运行一个已编译的Java程序，参数是类名。</p>
<p>[TOC]</p>
<hr>
<h1 id="（4）使用IDE"><a href="#（4）使用IDE" class="headerlink" title="（4）使用IDE"></a>（4）使用IDE</h1><p>IDE是集成开发环境：Integrated Development Environment的缩写。</p>
<p>使用IDE的好处在于，可以把编写代码、组织项目、编译、运行、调试等放到一个环境中运行，能极大地提高开发效率。</p>
<p>IDE提升开发效率主要靠以下几点：</p>
<ul>
<li>编辑器的自动提示，可以大大提高敲代码的速度；</li>
<li>代码修改后可以自动重新编译，并直接运行；</li>
<li>可以方便地进行断点调试。</li>
</ul>
<p>目前，流行的用于Java开发的IDE有：</p>
<h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3><p><a href="https://www.eclipse.org/">Eclipse</a>是由IBM开发并捐赠给开源社区的一个IDE，也是目前应用最广泛的IDE。Eclipse的特点是它本身是Java开发的，并且基于插件结构，即使是对Java开发的支持也是通过插件JDT实现的。</p>
<p>除了用于Java开发，Eclipse配合插件也可以作为C/C++开发环境、PHP开发环境、Rust开发环境等。</p>
<h3 id="IntelliJ-Idea"><a href="#IntelliJ-Idea" class="headerlink" title="IntelliJ Idea"></a>IntelliJ Idea</h3><p><a href="https://www.jetbrains.com/idea/">IntelliJ Idea</a>是由JetBrains公司开发的一个功能强大的IDE，分为免费版和商用付费版。JetBrains公司的IDE平台也是基于IDE平台+语言插件的模式，支持Python开发环境、Ruby开发环境、PHP开发环境等，这些开发环境也分为免费版和付费版。</p>
<hr>
<p>[TOC]</p>
<p>。。。。。。。。。。。。。。</p>
<p><strong><em>作者：zjh</em></strong></p>
]]></content>
      <categories>
        <category>JAVA笔记</category>
      </categories>
      <tags>
        <tag>JAVA笔记</tag>
      </tags>
  </entry>
</search>
